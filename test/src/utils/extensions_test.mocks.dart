// Mocks generated by Mockito 5.4.4 from annotations
// in zeta_flutter/test/src/utils/extensions_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:ui' as _i5;

import 'package:flutter/foundation.dart' as _i3;
import 'package:flutter/material.dart' as _i2;
import 'package:flutter/src/widgets/notification_listener.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i10;
import 'package:zeta_flutter/src/theme/color_scheme.dart' as _i7;
import 'package:zeta_flutter/src/theme/color_swatch.dart' as _i4;
import 'package:zeta_flutter/src/theme/contrast.dart' as _i9;
import 'package:zeta_flutter/zeta_flutter.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeWidget_0 extends _i1.SmartFake implements _i2.Widget {
  _FakeWidget_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i3.DiagnosticLevel? minLevel = _i3.DiagnosticLevel.info}) => super.toString();
}

class _FakeInheritedWidget_1 extends _i1.SmartFake implements _i2.InheritedWidget {
  _FakeInheritedWidget_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i3.DiagnosticLevel? minLevel = _i3.DiagnosticLevel.info}) => super.toString();
}

class _FakeDiagnosticsNode_2 extends _i1.SmartFake implements _i3.DiagnosticsNode {
  _FakeDiagnosticsNode_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({
    _i3.TextTreeConfiguration? parentConfiguration,
    _i3.DiagnosticLevel? minLevel = _i3.DiagnosticLevel.info,
  }) =>
      super.toString();
}

class _FakeZetaColorSwatch_3 extends _i1.SmartFake implements _i4.ZetaColorSwatch {
  _FakeZetaColorSwatch_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeColor_4 extends _i1.SmartFake implements _i5.Color {
  _FakeColor_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeZetaColors_5 extends _i1.SmartFake implements _i6.ZetaColors {
  _FakeZetaColors_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeZetaColorScheme_6 extends _i1.SmartFake implements _i7.ZetaColorScheme {
  _FakeZetaColorScheme_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i3.DiagnosticLevel? minLevel = _i3.DiagnosticLevel.info}) => super.toString();
}

class _FakeZetaThemeData_7 extends _i1.SmartFake implements _i6.ZetaThemeData {
  _FakeZetaThemeData_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeZetaRadiiSemantics_8 extends _i1.SmartFake implements _i6.ZetaRadiiSemantics {
  _FakeZetaRadiiSemantics_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeInheritedElement_9 extends _i1.SmartFake implements _i2.InheritedElement {
  _FakeInheritedElement_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );

  @override
  String toString({_i3.DiagnosticLevel? minLevel = _i3.DiagnosticLevel.info}) => super.toString();
}

/// A class which mocks [BuildContext].
///
/// See the documentation for Mockito's code generation for more information.
class MockBuildContext extends _i1.Mock implements _i2.BuildContext {
  @override
  _i2.Widget get widget => (super.noSuchMethod(
        Invocation.getter(#widget),
        returnValue: _FakeWidget_0(
          this,
          Invocation.getter(#widget),
        ),
        returnValueForMissingStub: _FakeWidget_0(
          this,
          Invocation.getter(#widget),
        ),
      ) as _i2.Widget);

  @override
  bool get mounted => (super.noSuchMethod(
        Invocation.getter(#mounted),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get debugDoingBuild => (super.noSuchMethod(
        Invocation.getter(#debugDoingBuild),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i2.InheritedWidget dependOnInheritedElement(
    _i2.InheritedElement? ancestor, {
    Object? aspect,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #dependOnInheritedElement,
          [ancestor],
          {#aspect: aspect},
        ),
        returnValue: _FakeInheritedWidget_1(
          this,
          Invocation.method(
            #dependOnInheritedElement,
            [ancestor],
            {#aspect: aspect},
          ),
        ),
        returnValueForMissingStub: _FakeInheritedWidget_1(
          this,
          Invocation.method(
            #dependOnInheritedElement,
            [ancestor],
            {#aspect: aspect},
          ),
        ),
      ) as _i2.InheritedWidget);

  @override
  void visitAncestorElements(_i2.ConditionalElementVisitor? visitor) => super.noSuchMethod(
        Invocation.method(
          #visitAncestorElements,
          [visitor],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void visitChildElements(_i2.ElementVisitor? visitor) => super.noSuchMethod(
        Invocation.method(
          #visitChildElements,
          [visitor],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispatchNotification(_i8.Notification? notification) => super.noSuchMethod(
        Invocation.method(
          #dispatchNotification,
          [notification],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.DiagnosticsNode describeElement(
    String? name, {
    _i3.DiagnosticsTreeStyle? style = _i3.DiagnosticsTreeStyle.errorProperty,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeElement,
          [name],
          {#style: style},
        ),
        returnValue: _FakeDiagnosticsNode_2(
          this,
          Invocation.method(
            #describeElement,
            [name],
            {#style: style},
          ),
        ),
        returnValueForMissingStub: _FakeDiagnosticsNode_2(
          this,
          Invocation.method(
            #describeElement,
            [name],
            {#style: style},
          ),
        ),
      ) as _i3.DiagnosticsNode);

  @override
  _i3.DiagnosticsNode describeWidget(
    String? name, {
    _i3.DiagnosticsTreeStyle? style = _i3.DiagnosticsTreeStyle.errorProperty,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #describeWidget,
          [name],
          {#style: style},
        ),
        returnValue: _FakeDiagnosticsNode_2(
          this,
          Invocation.method(
            #describeWidget,
            [name],
            {#style: style},
          ),
        ),
        returnValueForMissingStub: _FakeDiagnosticsNode_2(
          this,
          Invocation.method(
            #describeWidget,
            [name],
            {#style: style},
          ),
        ),
      ) as _i3.DiagnosticsNode);

  @override
  List<_i3.DiagnosticsNode> describeMissingAncestor({required Type? expectedAncestorType}) => (super.noSuchMethod(
        Invocation.method(
          #describeMissingAncestor,
          [],
          {#expectedAncestorType: expectedAncestorType},
        ),
        returnValue: <_i3.DiagnosticsNode>[],
        returnValueForMissingStub: <_i3.DiagnosticsNode>[],
      ) as List<_i3.DiagnosticsNode>);

  @override
  _i3.DiagnosticsNode describeOwnershipChain(String? name) => (super.noSuchMethod(
        Invocation.method(
          #describeOwnershipChain,
          [name],
        ),
        returnValue: _FakeDiagnosticsNode_2(
          this,
          Invocation.method(
            #describeOwnershipChain,
            [name],
          ),
        ),
        returnValueForMissingStub: _FakeDiagnosticsNode_2(
          this,
          Invocation.method(
            #describeOwnershipChain,
            [name],
          ),
        ),
      ) as _i3.DiagnosticsNode);
}

/// A class which mocks [ZetaColors].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockZetaColors extends _i1.Mock implements _i6.ZetaColors {
  @override
  _i5.Brightness get brightness => (super.noSuchMethod(
        Invocation.getter(#brightness),
        returnValue: _i5.Brightness.dark,
        returnValueForMissingStub: _i5.Brightness.dark,
      ) as _i5.Brightness);

  @override
  _i9.ZetaContrast get contrast => (super.noSuchMethod(
        Invocation.getter(#contrast),
        returnValue: _i9.ZetaContrast.aa,
        returnValueForMissingStub: _i9.ZetaContrast.aa,
      ) as _i9.ZetaContrast);

  @override
  _i4.ZetaColorSwatch get primary => (super.noSuchMethod(
        Invocation.getter(#primary),
        returnValue: _FakeZetaColorSwatch_3(
          this,
          Invocation.getter(#primary),
        ),
        returnValueForMissingStub: _FakeZetaColorSwatch_3(
          this,
          Invocation.getter(#primary),
        ),
      ) as _i4.ZetaColorSwatch);

  @override
  _i4.ZetaColorSwatch get secondary => (super.noSuchMethod(
        Invocation.getter(#secondary),
        returnValue: _FakeZetaColorSwatch_3(
          this,
          Invocation.getter(#secondary),
        ),
        returnValueForMissingStub: _FakeZetaColorSwatch_3(
          this,
          Invocation.getter(#secondary),
        ),
      ) as _i4.ZetaColorSwatch);

  @override
  _i4.ZetaColorSwatch get error => (super.noSuchMethod(
        Invocation.getter(#error),
        returnValue: _FakeZetaColorSwatch_3(
          this,
          Invocation.getter(#error),
        ),
        returnValueForMissingStub: _FakeZetaColorSwatch_3(
          this,
          Invocation.getter(#error),
        ),
      ) as _i4.ZetaColorSwatch);

  @override
  _i4.ZetaColorSwatch get cool => (super.noSuchMethod(
        Invocation.getter(#cool),
        returnValue: _FakeZetaColorSwatch_3(
          this,
          Invocation.getter(#cool),
        ),
        returnValueForMissingStub: _FakeZetaColorSwatch_3(
          this,
          Invocation.getter(#cool),
        ),
      ) as _i4.ZetaColorSwatch);

  @override
  _i4.ZetaColorSwatch get warm => (super.noSuchMethod(
        Invocation.getter(#warm),
        returnValue: _FakeZetaColorSwatch_3(
          this,
          Invocation.getter(#warm),
        ),
        returnValueForMissingStub: _FakeZetaColorSwatch_3(
          this,
          Invocation.getter(#warm),
        ),
      ) as _i4.ZetaColorSwatch);

  @override
  _i4.ZetaColorSwatch get pure => (super.noSuchMethod(
        Invocation.getter(#pure),
        returnValue: _FakeZetaColorSwatch_3(
          this,
          Invocation.getter(#pure),
        ),
        returnValueForMissingStub: _FakeZetaColorSwatch_3(
          this,
          Invocation.getter(#pure),
        ),
      ) as _i4.ZetaColorSwatch);

  @override
  _i5.Color get white => (super.noSuchMethod(
        Invocation.getter(#white),
        returnValue: _FakeColor_4(
          this,
          Invocation.getter(#white),
        ),
        returnValueForMissingStub: _FakeColor_4(
          this,
          Invocation.getter(#white),
        ),
      ) as _i5.Color);

  @override
  _i5.Color get black => (super.noSuchMethod(
        Invocation.getter(#black),
        returnValue: _FakeColor_4(
          this,
          Invocation.getter(#black),
        ),
        returnValueForMissingStub: _FakeColor_4(
          this,
          Invocation.getter(#black),
        ),
      ) as _i5.Color);

  @override
  _i5.Color get surfacePrimary => (super.noSuchMethod(
        Invocation.getter(#surfacePrimary),
        returnValue: _FakeColor_4(
          this,
          Invocation.getter(#surfacePrimary),
        ),
        returnValueForMissingStub: _FakeColor_4(
          this,
          Invocation.getter(#surfacePrimary),
        ),
      ) as _i5.Color);

  @override
  _i5.Color get surfaceSecondary => (super.noSuchMethod(
        Invocation.getter(#surfaceSecondary),
        returnValue: _FakeColor_4(
          this,
          Invocation.getter(#surfaceSecondary),
        ),
        returnValueForMissingStub: _FakeColor_4(
          this,
          Invocation.getter(#surfaceSecondary),
        ),
      ) as _i5.Color);

  @override
  _i5.Color get surfaceTertiary => (super.noSuchMethod(
        Invocation.getter(#surfaceTertiary),
        returnValue: _FakeColor_4(
          this,
          Invocation.getter(#surfaceTertiary),
        ),
        returnValueForMissingStub: _FakeColor_4(
          this,
          Invocation.getter(#surfaceTertiary),
        ),
      ) as _i5.Color);

  @override
  _i4.ZetaColorSwatch get blue => (super.noSuchMethod(
        Invocation.getter(#blue),
        returnValue: _FakeZetaColorSwatch_3(
          this,
          Invocation.getter(#blue),
        ),
        returnValueForMissingStub: _FakeZetaColorSwatch_3(
          this,
          Invocation.getter(#blue),
        ),
      ) as _i4.ZetaColorSwatch);

  @override
  _i4.ZetaColorSwatch get green => (super.noSuchMethod(
        Invocation.getter(#green),
        returnValue: _FakeZetaColorSwatch_3(
          this,
          Invocation.getter(#green),
        ),
        returnValueForMissingStub: _FakeZetaColorSwatch_3(
          this,
          Invocation.getter(#green),
        ),
      ) as _i4.ZetaColorSwatch);

  @override
  _i4.ZetaColorSwatch get red => (super.noSuchMethod(
        Invocation.getter(#red),
        returnValue: _FakeZetaColorSwatch_3(
          this,
          Invocation.getter(#red),
        ),
        returnValueForMissingStub: _FakeZetaColorSwatch_3(
          this,
          Invocation.getter(#red),
        ),
      ) as _i4.ZetaColorSwatch);

  @override
  _i4.ZetaColorSwatch get orange => (super.noSuchMethod(
        Invocation.getter(#orange),
        returnValue: _FakeZetaColorSwatch_3(
          this,
          Invocation.getter(#orange),
        ),
        returnValueForMissingStub: _FakeZetaColorSwatch_3(
          this,
          Invocation.getter(#orange),
        ),
      ) as _i4.ZetaColorSwatch);

  @override
  _i4.ZetaColorSwatch get purple => (super.noSuchMethod(
        Invocation.getter(#purple),
        returnValue: _FakeZetaColorSwatch_3(
          this,
          Invocation.getter(#purple),
        ),
        returnValueForMissingStub: _FakeZetaColorSwatch_3(
          this,
          Invocation.getter(#purple),
        ),
      ) as _i4.ZetaColorSwatch);

  @override
  _i4.ZetaColorSwatch get yellow => (super.noSuchMethod(
        Invocation.getter(#yellow),
        returnValue: _FakeZetaColorSwatch_3(
          this,
          Invocation.getter(#yellow),
        ),
        returnValueForMissingStub: _FakeZetaColorSwatch_3(
          this,
          Invocation.getter(#yellow),
        ),
      ) as _i4.ZetaColorSwatch);

  @override
  _i4.ZetaColorSwatch get teal => (super.noSuchMethod(
        Invocation.getter(#teal),
        returnValue: _FakeZetaColorSwatch_3(
          this,
          Invocation.getter(#teal),
        ),
        returnValueForMissingStub: _FakeZetaColorSwatch_3(
          this,
          Invocation.getter(#teal),
        ),
      ) as _i4.ZetaColorSwatch);

  @override
  _i4.ZetaColorSwatch get pink => (super.noSuchMethod(
        Invocation.getter(#pink),
        returnValue: _FakeZetaColorSwatch_3(
          this,
          Invocation.getter(#pink),
        ),
        returnValueForMissingStub: _FakeZetaColorSwatch_3(
          this,
          Invocation.getter(#pink),
        ),
      ) as _i4.ZetaColorSwatch);

  @override
  _i5.Color get surfaceHovered => (super.noSuchMethod(
        Invocation.getter(#surfaceHovered),
        returnValue: _FakeColor_4(
          this,
          Invocation.getter(#surfaceHovered),
        ),
        returnValueForMissingStub: _FakeColor_4(
          this,
          Invocation.getter(#surfaceHovered),
        ),
      ) as _i5.Color);

  @override
  _i5.Color get surfaceSelectedHovered => (super.noSuchMethod(
        Invocation.getter(#surfaceSelectedHovered),
        returnValue: _FakeColor_4(
          this,
          Invocation.getter(#surfaceSelectedHovered),
        ),
        returnValueForMissingStub: _FakeColor_4(
          this,
          Invocation.getter(#surfaceSelectedHovered),
        ),
      ) as _i5.Color);

  @override
  _i4.ZetaColorSwatch get positive => (super.noSuchMethod(
        Invocation.getter(#positive),
        returnValue: _FakeZetaColorSwatch_3(
          this,
          Invocation.getter(#positive),
        ),
        returnValueForMissingStub: _FakeZetaColorSwatch_3(
          this,
          Invocation.getter(#positive),
        ),
      ) as _i4.ZetaColorSwatch);

  @override
  _i4.ZetaColorSwatch get negative => (super.noSuchMethod(
        Invocation.getter(#negative),
        returnValue: _FakeZetaColorSwatch_3(
          this,
          Invocation.getter(#negative),
        ),
        returnValueForMissingStub: _FakeZetaColorSwatch_3(
          this,
          Invocation.getter(#negative),
        ),
      ) as _i4.ZetaColorSwatch);

  @override
  _i4.ZetaColorSwatch get warning => (super.noSuchMethod(
        Invocation.getter(#warning),
        returnValue: _FakeZetaColorSwatch_3(
          this,
          Invocation.getter(#warning),
        ),
        returnValueForMissingStub: _FakeZetaColorSwatch_3(
          this,
          Invocation.getter(#warning),
        ),
      ) as _i4.ZetaColorSwatch);

  @override
  _i4.ZetaColorSwatch get info => (super.noSuchMethod(
        Invocation.getter(#info),
        returnValue: _FakeZetaColorSwatch_3(
          this,
          Invocation.getter(#info),
        ),
        returnValueForMissingStub: _FakeZetaColorSwatch_3(
          this,
          Invocation.getter(#info),
        ),
      ) as _i4.ZetaColorSwatch);

  @override
  _i5.Color get shadow => (super.noSuchMethod(
        Invocation.getter(#shadow),
        returnValue: _FakeColor_4(
          this,
          Invocation.getter(#shadow),
        ),
        returnValueForMissingStub: _FakeColor_4(
          this,
          Invocation.getter(#shadow),
        ),
      ) as _i5.Color);

  @override
  _i5.Color get link => (super.noSuchMethod(
        Invocation.getter(#link),
        returnValue: _FakeColor_4(
          this,
          Invocation.getter(#link),
        ),
        returnValueForMissingStub: _FakeColor_4(
          this,
          Invocation.getter(#link),
        ),
      ) as _i5.Color);

  @override
  _i5.Color get linkVisited => (super.noSuchMethod(
        Invocation.getter(#linkVisited),
        returnValue: _FakeColor_4(
          this,
          Invocation.getter(#linkVisited),
        ),
        returnValueForMissingStub: _FakeColor_4(
          this,
          Invocation.getter(#linkVisited),
        ),
      ) as _i5.Color);

  @override
  _i5.Color get textDefault => (super.noSuchMethod(
        Invocation.getter(#textDefault),
        returnValue: _FakeColor_4(
          this,
          Invocation.getter(#textDefault),
        ),
        returnValueForMissingStub: _FakeColor_4(
          this,
          Invocation.getter(#textDefault),
        ),
      ) as _i5.Color);

  @override
  _i5.Color get textSubtle => (super.noSuchMethod(
        Invocation.getter(#textSubtle),
        returnValue: _FakeColor_4(
          this,
          Invocation.getter(#textSubtle),
        ),
        returnValueForMissingStub: _FakeColor_4(
          this,
          Invocation.getter(#textSubtle),
        ),
      ) as _i5.Color);

  @override
  _i5.Color get textDisabled => (super.noSuchMethod(
        Invocation.getter(#textDisabled),
        returnValue: _FakeColor_4(
          this,
          Invocation.getter(#textDisabled),
        ),
        returnValueForMissingStub: _FakeColor_4(
          this,
          Invocation.getter(#textDisabled),
        ),
      ) as _i5.Color);

  @override
  _i5.Color get textInverse => (super.noSuchMethod(
        Invocation.getter(#textInverse),
        returnValue: _FakeColor_4(
          this,
          Invocation.getter(#textInverse),
        ),
        returnValueForMissingStub: _FakeColor_4(
          this,
          Invocation.getter(#textInverse),
        ),
      ) as _i5.Color);

  @override
  _i5.Color get iconDefault => (super.noSuchMethod(
        Invocation.getter(#iconDefault),
        returnValue: _FakeColor_4(
          this,
          Invocation.getter(#iconDefault),
        ),
        returnValueForMissingStub: _FakeColor_4(
          this,
          Invocation.getter(#iconDefault),
        ),
      ) as _i5.Color);

  @override
  _i5.Color get iconSubtle => (super.noSuchMethod(
        Invocation.getter(#iconSubtle),
        returnValue: _FakeColor_4(
          this,
          Invocation.getter(#iconSubtle),
        ),
        returnValueForMissingStub: _FakeColor_4(
          this,
          Invocation.getter(#iconSubtle),
        ),
      ) as _i5.Color);

  @override
  _i5.Color get iconDisabled => (super.noSuchMethod(
        Invocation.getter(#iconDisabled),
        returnValue: _FakeColor_4(
          this,
          Invocation.getter(#iconDisabled),
        ),
        returnValueForMissingStub: _FakeColor_4(
          this,
          Invocation.getter(#iconDisabled),
        ),
      ) as _i5.Color);

  @override
  _i5.Color get iconInverse => (super.noSuchMethod(
        Invocation.getter(#iconInverse),
        returnValue: _FakeColor_4(
          this,
          Invocation.getter(#iconInverse),
        ),
        returnValueForMissingStub: _FakeColor_4(
          this,
          Invocation.getter(#iconInverse),
        ),
      ) as _i5.Color);

  @override
  _i5.Color get surfaceDefault => (super.noSuchMethod(
        Invocation.getter(#surfaceDefault),
        returnValue: _FakeColor_4(
          this,
          Invocation.getter(#surfaceDefault),
        ),
        returnValueForMissingStub: _FakeColor_4(
          this,
          Invocation.getter(#surfaceDefault),
        ),
      ) as _i5.Color);

  @override
  _i5.Color get surfaceDefaultInverse => (super.noSuchMethod(
        Invocation.getter(#surfaceDefaultInverse),
        returnValue: _FakeColor_4(
          this,
          Invocation.getter(#surfaceDefaultInverse),
        ),
        returnValueForMissingStub: _FakeColor_4(
          this,
          Invocation.getter(#surfaceDefaultInverse),
        ),
      ) as _i5.Color);

  @override
  _i5.Color get surfaceHover => (super.noSuchMethod(
        Invocation.getter(#surfaceHover),
        returnValue: _FakeColor_4(
          this,
          Invocation.getter(#surfaceHover),
        ),
        returnValueForMissingStub: _FakeColor_4(
          this,
          Invocation.getter(#surfaceHover),
        ),
      ) as _i5.Color);

  @override
  _i5.Color get surfaceSelected => (super.noSuchMethod(
        Invocation.getter(#surfaceSelected),
        returnValue: _FakeColor_4(
          this,
          Invocation.getter(#surfaceSelected),
        ),
        returnValueForMissingStub: _FakeColor_4(
          this,
          Invocation.getter(#surfaceSelected),
        ),
      ) as _i5.Color);

  @override
  _i5.Color get surfaceSelectedHover => (super.noSuchMethod(
        Invocation.getter(#surfaceSelectedHover),
        returnValue: _FakeColor_4(
          this,
          Invocation.getter(#surfaceSelectedHover),
        ),
        returnValueForMissingStub: _FakeColor_4(
          this,
          Invocation.getter(#surfaceSelectedHover),
        ),
      ) as _i5.Color);

  @override
  _i5.Color get surfaceDisabled => (super.noSuchMethod(
        Invocation.getter(#surfaceDisabled),
        returnValue: _FakeColor_4(
          this,
          Invocation.getter(#surfaceDisabled),
        ),
        returnValueForMissingStub: _FakeColor_4(
          this,
          Invocation.getter(#surfaceDisabled),
        ),
      ) as _i5.Color);

  @override
  _i5.Color get surfaceCool => (super.noSuchMethod(
        Invocation.getter(#surfaceCool),
        returnValue: _FakeColor_4(
          this,
          Invocation.getter(#surfaceCool),
        ),
        returnValueForMissingStub: _FakeColor_4(
          this,
          Invocation.getter(#surfaceCool),
        ),
      ) as _i5.Color);

  @override
  _i5.Color get surfaceWarm => (super.noSuchMethod(
        Invocation.getter(#surfaceWarm),
        returnValue: _FakeColor_4(
          this,
          Invocation.getter(#surfaceWarm),
        ),
        returnValueForMissingStub: _FakeColor_4(
          this,
          Invocation.getter(#surfaceWarm),
        ),
      ) as _i5.Color);

  @override
  _i5.Color get surfacePrimarySubtle => (super.noSuchMethod(
        Invocation.getter(#surfacePrimarySubtle),
        returnValue: _FakeColor_4(
          this,
          Invocation.getter(#surfacePrimarySubtle),
        ),
        returnValueForMissingStub: _FakeColor_4(
          this,
          Invocation.getter(#surfacePrimarySubtle),
        ),
      ) as _i5.Color);

  @override
  _i5.Color get surfaceAvatarBlue => (super.noSuchMethod(
        Invocation.getter(#surfaceAvatarBlue),
        returnValue: _FakeColor_4(
          this,
          Invocation.getter(#surfaceAvatarBlue),
        ),
        returnValueForMissingStub: _FakeColor_4(
          this,
          Invocation.getter(#surfaceAvatarBlue),
        ),
      ) as _i5.Color);

  @override
  _i4.ZetaColorSwatch get surfaceAvatarGreen => (super.noSuchMethod(
        Invocation.getter(#surfaceAvatarGreen),
        returnValue: _FakeZetaColorSwatch_3(
          this,
          Invocation.getter(#surfaceAvatarGreen),
        ),
        returnValueForMissingStub: _FakeZetaColorSwatch_3(
          this,
          Invocation.getter(#surfaceAvatarGreen),
        ),
      ) as _i4.ZetaColorSwatch);

  @override
  _i5.Color get surfaceAvatarOrange => (super.noSuchMethod(
        Invocation.getter(#surfaceAvatarOrange),
        returnValue: _FakeColor_4(
          this,
          Invocation.getter(#surfaceAvatarOrange),
        ),
        returnValueForMissingStub: _FakeColor_4(
          this,
          Invocation.getter(#surfaceAvatarOrange),
        ),
      ) as _i5.Color);

  @override
  _i5.Color get surfaceAvatarPink => (super.noSuchMethod(
        Invocation.getter(#surfaceAvatarPink),
        returnValue: _FakeColor_4(
          this,
          Invocation.getter(#surfaceAvatarPink),
        ),
        returnValueForMissingStub: _FakeColor_4(
          this,
          Invocation.getter(#surfaceAvatarPink),
        ),
      ) as _i5.Color);

  @override
  _i5.Color get surfaceAvatarPurple => (super.noSuchMethod(
        Invocation.getter(#surfaceAvatarPurple),
        returnValue: _FakeColor_4(
          this,
          Invocation.getter(#surfaceAvatarPurple),
        ),
        returnValueForMissingStub: _FakeColor_4(
          this,
          Invocation.getter(#surfaceAvatarPurple),
        ),
      ) as _i5.Color);

  @override
  _i5.Color get surfaceAvatarTeal => (super.noSuchMethod(
        Invocation.getter(#surfaceAvatarTeal),
        returnValue: _FakeColor_4(
          this,
          Invocation.getter(#surfaceAvatarTeal),
        ),
        returnValueForMissingStub: _FakeColor_4(
          this,
          Invocation.getter(#surfaceAvatarTeal),
        ),
      ) as _i5.Color);

  @override
  _i5.Color get surfaceAvatarYellow => (super.noSuchMethod(
        Invocation.getter(#surfaceAvatarYellow),
        returnValue: _FakeColor_4(
          this,
          Invocation.getter(#surfaceAvatarYellow),
        ),
        returnValueForMissingStub: _FakeColor_4(
          this,
          Invocation.getter(#surfaceAvatarYellow),
        ),
      ) as _i5.Color);

  @override
  _i5.Color get surfaceSecondarySubtle => (super.noSuchMethod(
        Invocation.getter(#surfaceSecondarySubtle),
        returnValue: _FakeColor_4(
          this,
          Invocation.getter(#surfaceSecondarySubtle),
        ),
        returnValueForMissingStub: _FakeColor_4(
          this,
          Invocation.getter(#surfaceSecondarySubtle),
        ),
      ) as _i5.Color);

  @override
  _i4.ZetaColorSwatch get surfacePositive => (super.noSuchMethod(
        Invocation.getter(#surfacePositive),
        returnValue: _FakeZetaColorSwatch_3(
          this,
          Invocation.getter(#surfacePositive),
        ),
        returnValueForMissingStub: _FakeZetaColorSwatch_3(
          this,
          Invocation.getter(#surfacePositive),
        ),
      ) as _i4.ZetaColorSwatch);

  @override
  _i5.Color get surfacePositiveSubtle => (super.noSuchMethod(
        Invocation.getter(#surfacePositiveSubtle),
        returnValue: _FakeColor_4(
          this,
          Invocation.getter(#surfacePositiveSubtle),
        ),
        returnValueForMissingStub: _FakeColor_4(
          this,
          Invocation.getter(#surfacePositiveSubtle),
        ),
      ) as _i5.Color);

  @override
  _i4.ZetaColorSwatch get surfaceWarning => (super.noSuchMethod(
        Invocation.getter(#surfaceWarning),
        returnValue: _FakeZetaColorSwatch_3(
          this,
          Invocation.getter(#surfaceWarning),
        ),
        returnValueForMissingStub: _FakeZetaColorSwatch_3(
          this,
          Invocation.getter(#surfaceWarning),
        ),
      ) as _i4.ZetaColorSwatch);

  @override
  _i5.Color get surfaceWarningSubtle => (super.noSuchMethod(
        Invocation.getter(#surfaceWarningSubtle),
        returnValue: _FakeColor_4(
          this,
          Invocation.getter(#surfaceWarningSubtle),
        ),
        returnValueForMissingStub: _FakeColor_4(
          this,
          Invocation.getter(#surfaceWarningSubtle),
        ),
      ) as _i5.Color);

  @override
  _i4.ZetaColorSwatch get surfaceNegative => (super.noSuchMethod(
        Invocation.getter(#surfaceNegative),
        returnValue: _FakeZetaColorSwatch_3(
          this,
          Invocation.getter(#surfaceNegative),
        ),
        returnValueForMissingStub: _FakeZetaColorSwatch_3(
          this,
          Invocation.getter(#surfaceNegative),
        ),
      ) as _i4.ZetaColorSwatch);

  @override
  _i5.Color get surfaceNegativeSubtle => (super.noSuchMethod(
        Invocation.getter(#surfaceNegativeSubtle),
        returnValue: _FakeColor_4(
          this,
          Invocation.getter(#surfaceNegativeSubtle),
        ),
        returnValueForMissingStub: _FakeColor_4(
          this,
          Invocation.getter(#surfaceNegativeSubtle),
        ),
      ) as _i5.Color);

  @override
  _i4.ZetaColorSwatch get surfaceInfo => (super.noSuchMethod(
        Invocation.getter(#surfaceInfo),
        returnValue: _FakeZetaColorSwatch_3(
          this,
          Invocation.getter(#surfaceInfo),
        ),
        returnValueForMissingStub: _FakeZetaColorSwatch_3(
          this,
          Invocation.getter(#surfaceInfo),
        ),
      ) as _i4.ZetaColorSwatch);

  @override
  _i5.Color get surfaceInfoSubtle => (super.noSuchMethod(
        Invocation.getter(#surfaceInfoSubtle),
        returnValue: _FakeColor_4(
          this,
          Invocation.getter(#surfaceInfoSubtle),
        ),
        returnValueForMissingStub: _FakeColor_4(
          this,
          Invocation.getter(#surfaceInfoSubtle),
        ),
      ) as _i5.Color);

  @override
  _i5.Color get borderDefault => (super.noSuchMethod(
        Invocation.getter(#borderDefault),
        returnValue: _FakeColor_4(
          this,
          Invocation.getter(#borderDefault),
        ),
        returnValueForMissingStub: _FakeColor_4(
          this,
          Invocation.getter(#borderDefault),
        ),
      ) as _i5.Color);

  @override
  _i5.Color get borderSubtle => (super.noSuchMethod(
        Invocation.getter(#borderSubtle),
        returnValue: _FakeColor_4(
          this,
          Invocation.getter(#borderSubtle),
        ),
        returnValueForMissingStub: _FakeColor_4(
          this,
          Invocation.getter(#borderSubtle),
        ),
      ) as _i5.Color);

  @override
  _i5.Color get borderHover => (super.noSuchMethod(
        Invocation.getter(#borderHover),
        returnValue: _FakeColor_4(
          this,
          Invocation.getter(#borderHover),
        ),
        returnValueForMissingStub: _FakeColor_4(
          this,
          Invocation.getter(#borderHover),
        ),
      ) as _i5.Color);

  @override
  _i5.Color get borderSelected => (super.noSuchMethod(
        Invocation.getter(#borderSelected),
        returnValue: _FakeColor_4(
          this,
          Invocation.getter(#borderSelected),
        ),
        returnValueForMissingStub: _FakeColor_4(
          this,
          Invocation.getter(#borderSelected),
        ),
      ) as _i5.Color);

  @override
  _i5.Color get borderDisabled => (super.noSuchMethod(
        Invocation.getter(#borderDisabled),
        returnValue: _FakeColor_4(
          this,
          Invocation.getter(#borderDisabled),
        ),
        returnValueForMissingStub: _FakeColor_4(
          this,
          Invocation.getter(#borderDisabled),
        ),
      ) as _i5.Color);

  @override
  _i5.Color get borderPure => (super.noSuchMethod(
        Invocation.getter(#borderPure),
        returnValue: _FakeColor_4(
          this,
          Invocation.getter(#borderPure),
        ),
        returnValueForMissingStub: _FakeColor_4(
          this,
          Invocation.getter(#borderPure),
        ),
      ) as _i5.Color);

  @override
  _i4.ZetaColorSwatch get borderPrimaryMain => (super.noSuchMethod(
        Invocation.getter(#borderPrimaryMain),
        returnValue: _FakeZetaColorSwatch_3(
          this,
          Invocation.getter(#borderPrimaryMain),
        ),
        returnValueForMissingStub: _FakeZetaColorSwatch_3(
          this,
          Invocation.getter(#borderPrimaryMain),
        ),
      ) as _i4.ZetaColorSwatch);

  @override
  _i5.Color get borderPrimary => (super.noSuchMethod(
        Invocation.getter(#borderPrimary),
        returnValue: _FakeColor_4(
          this,
          Invocation.getter(#borderPrimary),
        ),
        returnValueForMissingStub: _FakeColor_4(
          this,
          Invocation.getter(#borderPrimary),
        ),
      ) as _i5.Color);

  @override
  _i5.Color get borderSecondary => (super.noSuchMethod(
        Invocation.getter(#borderSecondary),
        returnValue: _FakeColor_4(
          this,
          Invocation.getter(#borderSecondary),
        ),
        returnValueForMissingStub: _FakeColor_4(
          this,
          Invocation.getter(#borderSecondary),
        ),
      ) as _i5.Color);

  @override
  _i5.Color get borderPositive => (super.noSuchMethod(
        Invocation.getter(#borderPositive),
        returnValue: _FakeColor_4(
          this,
          Invocation.getter(#borderPositive),
        ),
        returnValueForMissingStub: _FakeColor_4(
          this,
          Invocation.getter(#borderPositive),
        ),
      ) as _i5.Color);

  @override
  _i5.Color get borderWarning => (super.noSuchMethod(
        Invocation.getter(#borderWarning),
        returnValue: _FakeColor_4(
          this,
          Invocation.getter(#borderWarning),
        ),
        returnValueForMissingStub: _FakeColor_4(
          this,
          Invocation.getter(#borderWarning),
        ),
      ) as _i5.Color);

  @override
  _i5.Color get borderNegative => (super.noSuchMethod(
        Invocation.getter(#borderNegative),
        returnValue: _FakeColor_4(
          this,
          Invocation.getter(#borderNegative),
        ),
        returnValueForMissingStub: _FakeColor_4(
          this,
          Invocation.getter(#borderNegative),
        ),
      ) as _i5.Color);

  @override
  _i5.Color get borderInfo => (super.noSuchMethod(
        Invocation.getter(#borderInfo),
        returnValue: _FakeColor_4(
          this,
          Invocation.getter(#borderInfo),
        ),
        returnValueForMissingStub: _FakeColor_4(
          this,
          Invocation.getter(#borderInfo),
        ),
      ) as _i5.Color);

  @override
  bool get isDarkMode => (super.noSuchMethod(
        Invocation.getter(#isDarkMode),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  List<_i4.ZetaColorSwatch> get rainbow => (super.noSuchMethod(
        Invocation.getter(#rainbow),
        returnValue: <_i4.ZetaColorSwatch>[],
        returnValueForMissingStub: <_i4.ZetaColorSwatch>[],
      ) as List<_i4.ZetaColorSwatch>);

  @override
  Map<String, _i4.ZetaColorSwatch> get rainbowMap => (super.noSuchMethod(
        Invocation.getter(#rainbowMap),
        returnValue: <String, _i4.ZetaColorSwatch>{},
        returnValueForMissingStub: <String, _i4.ZetaColorSwatch>{},
      ) as Map<String, _i4.ZetaColorSwatch>);

  @override
  List<Object?> get props => (super.noSuchMethod(
        Invocation.getter(#props),
        returnValue: <Object?>[],
        returnValueForMissingStub: <Object?>[],
      ) as List<Object?>);

  @override
  _i6.ZetaColors copyWith({
    _i5.Brightness? brightness,
    _i9.ZetaContrast? contrast,
    _i4.ZetaColorSwatch? primary,
    _i4.ZetaColorSwatch? secondary,
    _i4.ZetaColorSwatch? error,
    _i4.ZetaColorSwatch? cool,
    _i4.ZetaColorSwatch? warm,
    _i5.Color? white,
    _i5.Color? black,
    _i5.Color? surfacePrimary,
    _i5.Color? surfaceSecondary,
    _i5.Color? surfaceTertiary,
    _i5.Color? link,
    _i5.Color? linkVisited,
    _i5.Color? shadow,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #copyWith,
          [],
          {
            #brightness: brightness,
            #contrast: contrast,
            #primary: primary,
            #secondary: secondary,
            #error: error,
            #cool: cool,
            #warm: warm,
            #white: white,
            #black: black,
            #surfacePrimary: surfacePrimary,
            #surfaceSecondary: surfaceSecondary,
            #surfaceTertiary: surfaceTertiary,
            #link: link,
            #linkVisited: linkVisited,
            #shadow: shadow,
          },
        ),
        returnValue: _FakeZetaColors_5(
          this,
          Invocation.method(
            #copyWith,
            [],
            {
              #brightness: brightness,
              #contrast: contrast,
              #primary: primary,
              #secondary: secondary,
              #error: error,
              #cool: cool,
              #warm: warm,
              #white: white,
              #black: black,
              #surfacePrimary: surfacePrimary,
              #surfaceSecondary: surfaceSecondary,
              #surfaceTertiary: surfaceTertiary,
              #link: link,
              #linkVisited: linkVisited,
              #shadow: shadow,
            },
          ),
        ),
        returnValueForMissingStub: _FakeZetaColors_5(
          this,
          Invocation.method(
            #copyWith,
            [],
            {
              #brightness: brightness,
              #contrast: contrast,
              #primary: primary,
              #secondary: secondary,
              #error: error,
              #cool: cool,
              #warm: warm,
              #white: white,
              #black: black,
              #surfacePrimary: surfacePrimary,
              #surfaceSecondary: surfaceSecondary,
              #surfaceTertiary: surfaceTertiary,
              #link: link,
              #linkVisited: linkVisited,
              #shadow: shadow,
            },
          ),
        ),
      ) as _i6.ZetaColors);

  @override
  _i6.ZetaColors apply({required _i9.ZetaContrast? contrast}) => (super.noSuchMethod(
        Invocation.method(
          #apply,
          [],
          {#contrast: contrast},
        ),
        returnValue: _FakeZetaColors_5(
          this,
          Invocation.method(
            #apply,
            [],
            {#contrast: contrast},
          ),
        ),
        returnValueForMissingStub: _FakeZetaColors_5(
          this,
          Invocation.method(
            #apply,
            [],
            {#contrast: contrast},
          ),
        ),
      ) as _i6.ZetaColors);

  @override
  _i7.ZetaColorScheme toScheme() => (super.noSuchMethod(
        Invocation.method(
          #toScheme,
          [],
        ),
        returnValue: _FakeZetaColorScheme_6(
          this,
          Invocation.method(
            #toScheme,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeZetaColorScheme_6(
          this,
          Invocation.method(
            #toScheme,
            [],
          ),
        ),
      ) as _i7.ZetaColorScheme);
}

/// A class which mocks [Zeta].
///
/// See the documentation for Mockito's code generation for more information.
class MockZeta extends _i1.Mock implements _i6.Zeta {
  @override
  _i9.ZetaContrast get contrast => (super.noSuchMethod(
        Invocation.getter(#contrast),
        returnValue: _i9.ZetaContrast.aa,
        returnValueForMissingStub: _i9.ZetaContrast.aa,
      ) as _i9.ZetaContrast);

  @override
  _i2.ThemeMode get themeMode => (super.noSuchMethod(
        Invocation.getter(#themeMode),
        returnValue: _i2.ThemeMode.system,
        returnValueForMissingStub: _i2.ThemeMode.system,
      ) as _i2.ThemeMode);

  @override
  _i6.ZetaThemeData get themeData => (super.noSuchMethod(
        Invocation.getter(#themeData),
        returnValue: _FakeZetaThemeData_7(
          this,
          Invocation.getter(#themeData),
        ),
        returnValueForMissingStub: _FakeZetaThemeData_7(
          this,
          Invocation.getter(#themeData),
        ),
      ) as _i6.ZetaThemeData);

  @override
  bool get rounded => (super.noSuchMethod(
        Invocation.getter(#rounded),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  _i6.ZetaColors get colors => (super.noSuchMethod(
        Invocation.getter(#colors),
        returnValue: _FakeZetaColors_5(
          this,
          Invocation.getter(#colors),
        ),
        returnValueForMissingStub: _FakeZetaColors_5(
          this,
          Invocation.getter(#colors),
        ),
      ) as _i6.ZetaColors);

  @override
  _i5.Brightness get brightness => (super.noSuchMethod(
        Invocation.getter(#brightness),
        returnValue: _i5.Brightness.dark,
        returnValueForMissingStub: _i5.Brightness.dark,
      ) as _i5.Brightness);

  @override
  _i6.ZetaRadiiSemantics get radius => (super.noSuchMethod(
        Invocation.getter(#radius),
        returnValue: _FakeZetaRadiiSemantics_8(
          this,
          Invocation.getter(#radius),
        ),
        returnValueForMissingStub: _FakeZetaRadiiSemantics_8(
          this,
          Invocation.getter(#radius),
        ),
      ) as _i6.ZetaRadiiSemantics);

  @override
  _i2.Widget get child => (super.noSuchMethod(
        Invocation.getter(#child),
        returnValue: _FakeWidget_0(
          this,
          Invocation.getter(#child),
        ),
        returnValueForMissingStub: _FakeWidget_0(
          this,
          Invocation.getter(#child),
        ),
      ) as _i2.Widget);

  @override
  bool updateShouldNotify(_i2.InheritedWidget? oldWidget) => (super.noSuchMethod(
        Invocation.method(
          #updateShouldNotify,
          [oldWidget],
        ),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  void debugFillProperties(_i3.DiagnosticPropertiesBuilder? properties) => super.noSuchMethod(
        Invocation.method(
          #debugFillProperties,
          [properties],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.InheritedElement createElement() => (super.noSuchMethod(
        Invocation.method(
          #createElement,
          [],
        ),
        returnValue: _FakeInheritedElement_9(
          this,
          Invocation.method(
            #createElement,
            [],
          ),
        ),
        returnValueForMissingStub: _FakeInheritedElement_9(
          this,
          Invocation.method(
            #createElement,
            [],
          ),
        ),
      ) as _i2.InheritedElement);

  @override
  String toStringShort() => (super.noSuchMethod(
        Invocation.method(
          #toStringShort,
          [],
        ),
        returnValue: _i10.dummyValue<String>(
          this,
          Invocation.method(
            #toStringShort,
            [],
          ),
        ),
        returnValueForMissingStub: _i10.dummyValue<String>(
          this,
          Invocation.method(
            #toStringShort,
            [],
          ),
        ),
      ) as String);

  @override
  String toStringShallow({
    String? joiner = r', ',
    _i3.DiagnosticLevel? minLevel = _i3.DiagnosticLevel.debug,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #toStringShallow,
          [],
          {
            #joiner: joiner,
            #minLevel: minLevel,
          },
        ),
        returnValue: _i10.dummyValue<String>(
          this,
          Invocation.method(
            #toStringShallow,
            [],
            {
              #joiner: joiner,
              #minLevel: minLevel,
            },
          ),
        ),
        returnValueForMissingStub: _i10.dummyValue<String>(
          this,
          Invocation.method(
            #toStringShallow,
            [],
            {
              #joiner: joiner,
              #minLevel: minLevel,
            },
          ),
        ),
      ) as String);

  @override
  String toStringDeep({
    String? prefixLineOne = r'',
    String? prefixOtherLines,
    _i3.DiagnosticLevel? minLevel = _i3.DiagnosticLevel.debug,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #toStringDeep,
          [],
          {
            #prefixLineOne: prefixLineOne,
            #prefixOtherLines: prefixOtherLines,
            #minLevel: minLevel,
          },
        ),
        returnValue: _i10.dummyValue<String>(
          this,
          Invocation.method(
            #toStringDeep,
            [],
            {
              #prefixLineOne: prefixLineOne,
              #prefixOtherLines: prefixOtherLines,
              #minLevel: minLevel,
            },
          ),
        ),
        returnValueForMissingStub: _i10.dummyValue<String>(
          this,
          Invocation.method(
            #toStringDeep,
            [],
            {
              #prefixLineOne: prefixLineOne,
              #prefixOtherLines: prefixOtherLines,
              #minLevel: minLevel,
            },
          ),
        ),
      ) as String);

  @override
  _i3.DiagnosticsNode toDiagnosticsNode({
    String? name,
    _i3.DiagnosticsTreeStyle? style,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #toDiagnosticsNode,
          [],
          {
            #name: name,
            #style: style,
          },
        ),
        returnValue: _FakeDiagnosticsNode_2(
          this,
          Invocation.method(
            #toDiagnosticsNode,
            [],
            {
              #name: name,
              #style: style,
            },
          ),
        ),
        returnValueForMissingStub: _FakeDiagnosticsNode_2(
          this,
          Invocation.method(
            #toDiagnosticsNode,
            [],
            {
              #name: name,
              #style: style,
            },
          ),
        ),
      ) as _i3.DiagnosticsNode);

  @override
  List<_i3.DiagnosticsNode> debugDescribeChildren() => (super.noSuchMethod(
        Invocation.method(
          #debugDescribeChildren,
          [],
        ),
        returnValue: <_i3.DiagnosticsNode>[],
        returnValueForMissingStub: <_i3.DiagnosticsNode>[],
      ) as List<_i3.DiagnosticsNode>);

  @override
  String toString({_i3.DiagnosticLevel? minLevel = _i3.DiagnosticLevel.info}) => super.toString();
}
