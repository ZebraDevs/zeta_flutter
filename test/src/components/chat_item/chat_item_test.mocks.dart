// Mocks generated by Mockito 5.4.4 from annotations
// in zeta_flutter/test/src/components/chat_item/chat_item_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:ui' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:zeta_flutter/generated/tokens/primitives.g.dart' as _i2;
import 'package:zeta_flutter/generated/tokens/semantics.g.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeZetaPrimitives_0 extends _i1.SmartFake implements _i2.ZetaPrimitives {
  _FakeZetaPrimitives_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeColor_1 extends _i1.SmartFake implements _i3.Color {
  _FakeColor_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ZetaSemanticColors].
///
/// See the documentation for Mockito's code generation for more information.
class MockZetaSemanticColors extends _i1.Mock implements _i4.ZetaSemanticColors {
  @override
  _i2.ZetaPrimitives get primitives => (super.noSuchMethod(
        Invocation.getter(#primitives),
        returnValue: _FakeZetaPrimitives_0(
          this,
          Invocation.getter(#primitives),
        ),
        returnValueForMissingStub: _FakeZetaPrimitives_0(
          this,
          Invocation.getter(#primitives),
        ),
      ) as _i2.ZetaPrimitives);

  @override
  _i3.Color get mainDefault => (super.noSuchMethod(
        Invocation.getter(#mainDefault),
        returnValue: _FakeColor_1(
          this,
          Invocation.getter(#mainDefault),
        ),
        returnValueForMissingStub: _FakeColor_1(
          this,
          Invocation.getter(#mainDefault),
        ),
      ) as _i3.Color);

  @override
  _i3.Color get mainSubtle => (super.noSuchMethod(
        Invocation.getter(#mainSubtle),
        returnValue: _FakeColor_1(
          this,
          Invocation.getter(#mainSubtle),
        ),
        returnValueForMissingStub: _FakeColor_1(
          this,
          Invocation.getter(#mainSubtle),
        ),
      ) as _i3.Color);

  @override
  _i3.Color get mainPrimary => (super.noSuchMethod(
        Invocation.getter(#mainPrimary),
        returnValue: _FakeColor_1(
          this,
          Invocation.getter(#mainPrimary),
        ),
        returnValueForMissingStub: _FakeColor_1(
          this,
          Invocation.getter(#mainPrimary),
        ),
      ) as _i3.Color);

  @override
  _i3.Color get mainSecondary => (super.noSuchMethod(
        Invocation.getter(#mainSecondary),
        returnValue: _FakeColor_1(
          this,
          Invocation.getter(#mainSecondary),
        ),
        returnValueForMissingStub: _FakeColor_1(
          this,
          Invocation.getter(#mainSecondary),
        ),
      ) as _i3.Color);

  @override
  _i3.Color get mainPositive => (super.noSuchMethod(
        Invocation.getter(#mainPositive),
        returnValue: _FakeColor_1(
          this,
          Invocation.getter(#mainPositive),
        ),
        returnValueForMissingStub: _FakeColor_1(
          this,
          Invocation.getter(#mainPositive),
        ),
      ) as _i3.Color);

  @override
  _i3.Color get mainWarning => (super.noSuchMethod(
        Invocation.getter(#mainWarning),
        returnValue: _FakeColor_1(
          this,
          Invocation.getter(#mainWarning),
        ),
        returnValueForMissingStub: _FakeColor_1(
          this,
          Invocation.getter(#mainWarning),
        ),
      ) as _i3.Color);

  @override
  _i3.Color get mainNegative => (super.noSuchMethod(
        Invocation.getter(#mainNegative),
        returnValue: _FakeColor_1(
          this,
          Invocation.getter(#mainNegative),
        ),
        returnValueForMissingStub: _FakeColor_1(
          this,
          Invocation.getter(#mainNegative),
        ),
      ) as _i3.Color);

  @override
  _i3.Color get mainInfo => (super.noSuchMethod(
        Invocation.getter(#mainInfo),
        returnValue: _FakeColor_1(
          this,
          Invocation.getter(#mainInfo),
        ),
        returnValueForMissingStub: _FakeColor_1(
          this,
          Invocation.getter(#mainInfo),
        ),
      ) as _i3.Color);

  @override
  _i3.Color get mainDisabled => (super.noSuchMethod(
        Invocation.getter(#mainDisabled),
        returnValue: _FakeColor_1(
          this,
          Invocation.getter(#mainDisabled),
        ),
        returnValueForMissingStub: _FakeColor_1(
          this,
          Invocation.getter(#mainDisabled),
        ),
      ) as _i3.Color);

  @override
  _i3.Color get mainLight => (super.noSuchMethod(
        Invocation.getter(#mainLight),
        returnValue: _FakeColor_1(
          this,
          Invocation.getter(#mainLight),
        ),
        returnValueForMissingStub: _FakeColor_1(
          this,
          Invocation.getter(#mainLight),
        ),
      ) as _i3.Color);

  @override
  _i3.Color get mainInverse => (super.noSuchMethod(
        Invocation.getter(#mainInverse),
        returnValue: _FakeColor_1(
          this,
          Invocation.getter(#mainInverse),
        ),
        returnValueForMissingStub: _FakeColor_1(
          this,
          Invocation.getter(#mainInverse),
        ),
      ) as _i3.Color);

  @override
  _i3.Color get borderDefault => (super.noSuchMethod(
        Invocation.getter(#borderDefault),
        returnValue: _FakeColor_1(
          this,
          Invocation.getter(#borderDefault),
        ),
        returnValueForMissingStub: _FakeColor_1(
          this,
          Invocation.getter(#borderDefault),
        ),
      ) as _i3.Color);

  @override
  _i3.Color get borderSelected => (super.noSuchMethod(
        Invocation.getter(#borderSelected),
        returnValue: _FakeColor_1(
          this,
          Invocation.getter(#borderSelected),
        ),
        returnValueForMissingStub: _FakeColor_1(
          this,
          Invocation.getter(#borderSelected),
        ),
      ) as _i3.Color);

  @override
  _i3.Color get borderHover => (super.noSuchMethod(
        Invocation.getter(#borderHover),
        returnValue: _FakeColor_1(
          this,
          Invocation.getter(#borderHover),
        ),
        returnValueForMissingStub: _FakeColor_1(
          this,
          Invocation.getter(#borderHover),
        ),
      ) as _i3.Color);

  @override
  _i3.Color get borderSubtle => (super.noSuchMethod(
        Invocation.getter(#borderSubtle),
        returnValue: _FakeColor_1(
          this,
          Invocation.getter(#borderSubtle),
        ),
        returnValueForMissingStub: _FakeColor_1(
          this,
          Invocation.getter(#borderSubtle),
        ),
      ) as _i3.Color);

  @override
  _i3.Color get borderDisabled => (super.noSuchMethod(
        Invocation.getter(#borderDisabled),
        returnValue: _FakeColor_1(
          this,
          Invocation.getter(#borderDisabled),
        ),
        returnValueForMissingStub: _FakeColor_1(
          this,
          Invocation.getter(#borderDisabled),
        ),
      ) as _i3.Color);

  @override
  _i3.Color get borderPure => (super.noSuchMethod(
        Invocation.getter(#borderPure),
        returnValue: _FakeColor_1(
          this,
          Invocation.getter(#borderPure),
        ),
        returnValueForMissingStub: _FakeColor_1(
          this,
          Invocation.getter(#borderPure),
        ),
      ) as _i3.Color);

  @override
  _i3.Color get borderPrimaryMain => (super.noSuchMethod(
        Invocation.getter(#borderPrimaryMain),
        returnValue: _FakeColor_1(
          this,
          Invocation.getter(#borderPrimaryMain),
        ),
        returnValueForMissingStub: _FakeColor_1(
          this,
          Invocation.getter(#borderPrimaryMain),
        ),
      ) as _i3.Color);

  @override
  _i3.Color get borderPrimary => (super.noSuchMethod(
        Invocation.getter(#borderPrimary),
        returnValue: _FakeColor_1(
          this,
          Invocation.getter(#borderPrimary),
        ),
        returnValueForMissingStub: _FakeColor_1(
          this,
          Invocation.getter(#borderPrimary),
        ),
      ) as _i3.Color);

  @override
  _i3.Color get borderSecondary => (super.noSuchMethod(
        Invocation.getter(#borderSecondary),
        returnValue: _FakeColor_1(
          this,
          Invocation.getter(#borderSecondary),
        ),
        returnValueForMissingStub: _FakeColor_1(
          this,
          Invocation.getter(#borderSecondary),
        ),
      ) as _i3.Color);

  @override
  _i3.Color get borderPositive => (super.noSuchMethod(
        Invocation.getter(#borderPositive),
        returnValue: _FakeColor_1(
          this,
          Invocation.getter(#borderPositive),
        ),
        returnValueForMissingStub: _FakeColor_1(
          this,
          Invocation.getter(#borderPositive),
        ),
      ) as _i3.Color);

  @override
  _i3.Color get borderWarning => (super.noSuchMethod(
        Invocation.getter(#borderWarning),
        returnValue: _FakeColor_1(
          this,
          Invocation.getter(#borderWarning),
        ),
        returnValueForMissingStub: _FakeColor_1(
          this,
          Invocation.getter(#borderWarning),
        ),
      ) as _i3.Color);

  @override
  _i3.Color get borderNegative => (super.noSuchMethod(
        Invocation.getter(#borderNegative),
        returnValue: _FakeColor_1(
          this,
          Invocation.getter(#borderNegative),
        ),
        returnValueForMissingStub: _FakeColor_1(
          this,
          Invocation.getter(#borderNegative),
        ),
      ) as _i3.Color);

  @override
  _i3.Color get borderInfo => (super.noSuchMethod(
        Invocation.getter(#borderInfo),
        returnValue: _FakeColor_1(
          this,
          Invocation.getter(#borderInfo),
        ),
        returnValueForMissingStub: _FakeColor_1(
          this,
          Invocation.getter(#borderInfo),
        ),
      ) as _i3.Color);

  @override
  _i3.Color get surfaceDefault => (super.noSuchMethod(
        Invocation.getter(#surfaceDefault),
        returnValue: _FakeColor_1(
          this,
          Invocation.getter(#surfaceDefault),
        ),
        returnValueForMissingStub: _FakeColor_1(
          this,
          Invocation.getter(#surfaceDefault),
        ),
      ) as _i3.Color);

  @override
  _i3.Color get surfaceDefaultInverse => (super.noSuchMethod(
        Invocation.getter(#surfaceDefaultInverse),
        returnValue: _FakeColor_1(
          this,
          Invocation.getter(#surfaceDefaultInverse),
        ),
        returnValueForMissingStub: _FakeColor_1(
          this,
          Invocation.getter(#surfaceDefaultInverse),
        ),
      ) as _i3.Color);

  @override
  _i3.Color get surfaceHover => (super.noSuchMethod(
        Invocation.getter(#surfaceHover),
        returnValue: _FakeColor_1(
          this,
          Invocation.getter(#surfaceHover),
        ),
        returnValueForMissingStub: _FakeColor_1(
          this,
          Invocation.getter(#surfaceHover),
        ),
      ) as _i3.Color);

  @override
  _i3.Color get surfaceSelected => (super.noSuchMethod(
        Invocation.getter(#surfaceSelected),
        returnValue: _FakeColor_1(
          this,
          Invocation.getter(#surfaceSelected),
        ),
        returnValueForMissingStub: _FakeColor_1(
          this,
          Invocation.getter(#surfaceSelected),
        ),
      ) as _i3.Color);

  @override
  _i3.Color get surfaceSelectedHover => (super.noSuchMethod(
        Invocation.getter(#surfaceSelectedHover),
        returnValue: _FakeColor_1(
          this,
          Invocation.getter(#surfaceSelectedHover),
        ),
        returnValueForMissingStub: _FakeColor_1(
          this,
          Invocation.getter(#surfaceSelectedHover),
        ),
      ) as _i3.Color);

  @override
  _i3.Color get surfaceDisabled => (super.noSuchMethod(
        Invocation.getter(#surfaceDisabled),
        returnValue: _FakeColor_1(
          this,
          Invocation.getter(#surfaceDisabled),
        ),
        returnValueForMissingStub: _FakeColor_1(
          this,
          Invocation.getter(#surfaceDisabled),
        ),
      ) as _i3.Color);

  @override
  _i3.Color get surfaceCool => (super.noSuchMethod(
        Invocation.getter(#surfaceCool),
        returnValue: _FakeColor_1(
          this,
          Invocation.getter(#surfaceCool),
        ),
        returnValueForMissingStub: _FakeColor_1(
          this,
          Invocation.getter(#surfaceCool),
        ),
      ) as _i3.Color);

  @override
  _i3.Color get surfaceWarm => (super.noSuchMethod(
        Invocation.getter(#surfaceWarm),
        returnValue: _FakeColor_1(
          this,
          Invocation.getter(#surfaceWarm),
        ),
        returnValueForMissingStub: _FakeColor_1(
          this,
          Invocation.getter(#surfaceWarm),
        ),
      ) as _i3.Color);

  @override
  _i3.Color get surfacePrimary => (super.noSuchMethod(
        Invocation.getter(#surfacePrimary),
        returnValue: _FakeColor_1(
          this,
          Invocation.getter(#surfacePrimary),
        ),
        returnValueForMissingStub: _FakeColor_1(
          this,
          Invocation.getter(#surfacePrimary),
        ),
      ) as _i3.Color);

  @override
  _i3.Color get surfacePrimarySubtle => (super.noSuchMethod(
        Invocation.getter(#surfacePrimarySubtle),
        returnValue: _FakeColor_1(
          this,
          Invocation.getter(#surfacePrimarySubtle),
        ),
        returnValueForMissingStub: _FakeColor_1(
          this,
          Invocation.getter(#surfacePrimarySubtle),
        ),
      ) as _i3.Color);

  @override
  _i3.Color get surfaceSecondary => (super.noSuchMethod(
        Invocation.getter(#surfaceSecondary),
        returnValue: _FakeColor_1(
          this,
          Invocation.getter(#surfaceSecondary),
        ),
        returnValueForMissingStub: _FakeColor_1(
          this,
          Invocation.getter(#surfaceSecondary),
        ),
      ) as _i3.Color);

  @override
  _i3.Color get surfaceAvatarBlue => (super.noSuchMethod(
        Invocation.getter(#surfaceAvatarBlue),
        returnValue: _FakeColor_1(
          this,
          Invocation.getter(#surfaceAvatarBlue),
        ),
        returnValueForMissingStub: _FakeColor_1(
          this,
          Invocation.getter(#surfaceAvatarBlue),
        ),
      ) as _i3.Color);

  @override
  _i3.Color get surfaceAvatarGreen => (super.noSuchMethod(
        Invocation.getter(#surfaceAvatarGreen),
        returnValue: _FakeColor_1(
          this,
          Invocation.getter(#surfaceAvatarGreen),
        ),
        returnValueForMissingStub: _FakeColor_1(
          this,
          Invocation.getter(#surfaceAvatarGreen),
        ),
      ) as _i3.Color);

  @override
  _i3.Color get surfaceAvatarOrange => (super.noSuchMethod(
        Invocation.getter(#surfaceAvatarOrange),
        returnValue: _FakeColor_1(
          this,
          Invocation.getter(#surfaceAvatarOrange),
        ),
        returnValueForMissingStub: _FakeColor_1(
          this,
          Invocation.getter(#surfaceAvatarOrange),
        ),
      ) as _i3.Color);

  @override
  _i3.Color get surfaceAvatarPink => (super.noSuchMethod(
        Invocation.getter(#surfaceAvatarPink),
        returnValue: _FakeColor_1(
          this,
          Invocation.getter(#surfaceAvatarPink),
        ),
        returnValueForMissingStub: _FakeColor_1(
          this,
          Invocation.getter(#surfaceAvatarPink),
        ),
      ) as _i3.Color);

  @override
  _i3.Color get surfaceAvatarPurple => (super.noSuchMethod(
        Invocation.getter(#surfaceAvatarPurple),
        returnValue: _FakeColor_1(
          this,
          Invocation.getter(#surfaceAvatarPurple),
        ),
        returnValueForMissingStub: _FakeColor_1(
          this,
          Invocation.getter(#surfaceAvatarPurple),
        ),
      ) as _i3.Color);

  @override
  _i3.Color get surfaceAvatarTeal => (super.noSuchMethod(
        Invocation.getter(#surfaceAvatarTeal),
        returnValue: _FakeColor_1(
          this,
          Invocation.getter(#surfaceAvatarTeal),
        ),
        returnValueForMissingStub: _FakeColor_1(
          this,
          Invocation.getter(#surfaceAvatarTeal),
        ),
      ) as _i3.Color);

  @override
  _i3.Color get surfaceAvatarYellow => (super.noSuchMethod(
        Invocation.getter(#surfaceAvatarYellow),
        returnValue: _FakeColor_1(
          this,
          Invocation.getter(#surfaceAvatarYellow),
        ),
        returnValueForMissingStub: _FakeColor_1(
          this,
          Invocation.getter(#surfaceAvatarYellow),
        ),
      ) as _i3.Color);

  @override
  _i3.Color get surfaceSecondarySubtle => (super.noSuchMethod(
        Invocation.getter(#surfaceSecondarySubtle),
        returnValue: _FakeColor_1(
          this,
          Invocation.getter(#surfaceSecondarySubtle),
        ),
        returnValueForMissingStub: _FakeColor_1(
          this,
          Invocation.getter(#surfaceSecondarySubtle),
        ),
      ) as _i3.Color);

  @override
  _i3.Color get surfacePositive => (super.noSuchMethod(
        Invocation.getter(#surfacePositive),
        returnValue: _FakeColor_1(
          this,
          Invocation.getter(#surfacePositive),
        ),
        returnValueForMissingStub: _FakeColor_1(
          this,
          Invocation.getter(#surfacePositive),
        ),
      ) as _i3.Color);

  @override
  _i3.Color get surfacePositiveSubtle => (super.noSuchMethod(
        Invocation.getter(#surfacePositiveSubtle),
        returnValue: _FakeColor_1(
          this,
          Invocation.getter(#surfacePositiveSubtle),
        ),
        returnValueForMissingStub: _FakeColor_1(
          this,
          Invocation.getter(#surfacePositiveSubtle),
        ),
      ) as _i3.Color);

  @override
  _i3.Color get surfaceWarning => (super.noSuchMethod(
        Invocation.getter(#surfaceWarning),
        returnValue: _FakeColor_1(
          this,
          Invocation.getter(#surfaceWarning),
        ),
        returnValueForMissingStub: _FakeColor_1(
          this,
          Invocation.getter(#surfaceWarning),
        ),
      ) as _i3.Color);

  @override
  _i3.Color get surfaceWarningSubtle => (super.noSuchMethod(
        Invocation.getter(#surfaceWarningSubtle),
        returnValue: _FakeColor_1(
          this,
          Invocation.getter(#surfaceWarningSubtle),
        ),
        returnValueForMissingStub: _FakeColor_1(
          this,
          Invocation.getter(#surfaceWarningSubtle),
        ),
      ) as _i3.Color);

  @override
  _i3.Color get surfaceNegative => (super.noSuchMethod(
        Invocation.getter(#surfaceNegative),
        returnValue: _FakeColor_1(
          this,
          Invocation.getter(#surfaceNegative),
        ),
        returnValueForMissingStub: _FakeColor_1(
          this,
          Invocation.getter(#surfaceNegative),
        ),
      ) as _i3.Color);

  @override
  _i3.Color get surfaceNegativeSubtle => (super.noSuchMethod(
        Invocation.getter(#surfaceNegativeSubtle),
        returnValue: _FakeColor_1(
          this,
          Invocation.getter(#surfaceNegativeSubtle),
        ),
        returnValueForMissingStub: _FakeColor_1(
          this,
          Invocation.getter(#surfaceNegativeSubtle),
        ),
      ) as _i3.Color);

  @override
  _i3.Color get surfaceInfo => (super.noSuchMethod(
        Invocation.getter(#surfaceInfo),
        returnValue: _FakeColor_1(
          this,
          Invocation.getter(#surfaceInfo),
        ),
        returnValueForMissingStub: _FakeColor_1(
          this,
          Invocation.getter(#surfaceInfo),
        ),
      ) as _i3.Color);

  @override
  _i3.Color get surfaceInfoSubtle => (super.noSuchMethod(
        Invocation.getter(#surfaceInfoSubtle),
        returnValue: _FakeColor_1(
          this,
          Invocation.getter(#surfaceInfoSubtle),
        ),
        returnValueForMissingStub: _FakeColor_1(
          this,
          Invocation.getter(#surfaceInfoSubtle),
        ),
      ) as _i3.Color);

  @override
  _i3.Color get stateDisabledDisabled => (super.noSuchMethod(
        Invocation.getter(#stateDisabledDisabled),
        returnValue: _FakeColor_1(
          this,
          Invocation.getter(#stateDisabledDisabled),
        ),
        returnValueForMissingStub: _FakeColor_1(
          this,
          Invocation.getter(#stateDisabledDisabled),
        ),
      ) as _i3.Color);

  @override
  _i3.Color get stateDefaultEnabled => (super.noSuchMethod(
        Invocation.getter(#stateDefaultEnabled),
        returnValue: _FakeColor_1(
          this,
          Invocation.getter(#stateDefaultEnabled),
        ),
        returnValueForMissingStub: _FakeColor_1(
          this,
          Invocation.getter(#stateDefaultEnabled),
        ),
      ) as _i3.Color);

  @override
  _i3.Color get stateDefaultHover => (super.noSuchMethod(
        Invocation.getter(#stateDefaultHover),
        returnValue: _FakeColor_1(
          this,
          Invocation.getter(#stateDefaultHover),
        ),
        returnValueForMissingStub: _FakeColor_1(
          this,
          Invocation.getter(#stateDefaultHover),
        ),
      ) as _i3.Color);

  @override
  _i3.Color get stateDefaultSelected => (super.noSuchMethod(
        Invocation.getter(#stateDefaultSelected),
        returnValue: _FakeColor_1(
          this,
          Invocation.getter(#stateDefaultSelected),
        ),
        returnValueForMissingStub: _FakeColor_1(
          this,
          Invocation.getter(#stateDefaultSelected),
        ),
      ) as _i3.Color);

  @override
  _i3.Color get stateDefaultFocus => (super.noSuchMethod(
        Invocation.getter(#stateDefaultFocus),
        returnValue: _FakeColor_1(
          this,
          Invocation.getter(#stateDefaultFocus),
        ),
        returnValueForMissingStub: _FakeColor_1(
          this,
          Invocation.getter(#stateDefaultFocus),
        ),
      ) as _i3.Color);

  @override
  _i3.Color get statePrimaryEnabled => (super.noSuchMethod(
        Invocation.getter(#statePrimaryEnabled),
        returnValue: _FakeColor_1(
          this,
          Invocation.getter(#statePrimaryEnabled),
        ),
        returnValueForMissingStub: _FakeColor_1(
          this,
          Invocation.getter(#statePrimaryEnabled),
        ),
      ) as _i3.Color);

  @override
  _i3.Color get statePrimaryHover => (super.noSuchMethod(
        Invocation.getter(#statePrimaryHover),
        returnValue: _FakeColor_1(
          this,
          Invocation.getter(#statePrimaryHover),
        ),
        returnValueForMissingStub: _FakeColor_1(
          this,
          Invocation.getter(#statePrimaryHover),
        ),
      ) as _i3.Color);

  @override
  _i3.Color get statePrimarySelected => (super.noSuchMethod(
        Invocation.getter(#statePrimarySelected),
        returnValue: _FakeColor_1(
          this,
          Invocation.getter(#statePrimarySelected),
        ),
        returnValueForMissingStub: _FakeColor_1(
          this,
          Invocation.getter(#statePrimarySelected),
        ),
      ) as _i3.Color);

  @override
  _i3.Color get statePrimaryFocus => (super.noSuchMethod(
        Invocation.getter(#statePrimaryFocus),
        returnValue: _FakeColor_1(
          this,
          Invocation.getter(#statePrimaryFocus),
        ),
        returnValueForMissingStub: _FakeColor_1(
          this,
          Invocation.getter(#statePrimaryFocus),
        ),
      ) as _i3.Color);

  @override
  _i3.Color get stateSecondaryEnabled => (super.noSuchMethod(
        Invocation.getter(#stateSecondaryEnabled),
        returnValue: _FakeColor_1(
          this,
          Invocation.getter(#stateSecondaryEnabled),
        ),
        returnValueForMissingStub: _FakeColor_1(
          this,
          Invocation.getter(#stateSecondaryEnabled),
        ),
      ) as _i3.Color);

  @override
  _i3.Color get stateSecondaryHover => (super.noSuchMethod(
        Invocation.getter(#stateSecondaryHover),
        returnValue: _FakeColor_1(
          this,
          Invocation.getter(#stateSecondaryHover),
        ),
        returnValueForMissingStub: _FakeColor_1(
          this,
          Invocation.getter(#stateSecondaryHover),
        ),
      ) as _i3.Color);

  @override
  _i3.Color get stateSecondarySelected => (super.noSuchMethod(
        Invocation.getter(#stateSecondarySelected),
        returnValue: _FakeColor_1(
          this,
          Invocation.getter(#stateSecondarySelected),
        ),
        returnValueForMissingStub: _FakeColor_1(
          this,
          Invocation.getter(#stateSecondarySelected),
        ),
      ) as _i3.Color);

  @override
  _i3.Color get stateSecondaryFocus => (super.noSuchMethod(
        Invocation.getter(#stateSecondaryFocus),
        returnValue: _FakeColor_1(
          this,
          Invocation.getter(#stateSecondaryFocus),
        ),
        returnValueForMissingStub: _FakeColor_1(
          this,
          Invocation.getter(#stateSecondaryFocus),
        ),
      ) as _i3.Color);

  @override
  _i3.Color get stateNegativeEnabled => (super.noSuchMethod(
        Invocation.getter(#stateNegativeEnabled),
        returnValue: _FakeColor_1(
          this,
          Invocation.getter(#stateNegativeEnabled),
        ),
        returnValueForMissingStub: _FakeColor_1(
          this,
          Invocation.getter(#stateNegativeEnabled),
        ),
      ) as _i3.Color);

  @override
  _i3.Color get stateNegativeHover => (super.noSuchMethod(
        Invocation.getter(#stateNegativeHover),
        returnValue: _FakeColor_1(
          this,
          Invocation.getter(#stateNegativeHover),
        ),
        returnValueForMissingStub: _FakeColor_1(
          this,
          Invocation.getter(#stateNegativeHover),
        ),
      ) as _i3.Color);

  @override
  _i3.Color get stateNegativeSelected => (super.noSuchMethod(
        Invocation.getter(#stateNegativeSelected),
        returnValue: _FakeColor_1(
          this,
          Invocation.getter(#stateNegativeSelected),
        ),
        returnValueForMissingStub: _FakeColor_1(
          this,
          Invocation.getter(#stateNegativeSelected),
        ),
      ) as _i3.Color);

  @override
  _i3.Color get stateNegativeFocus => (super.noSuchMethod(
        Invocation.getter(#stateNegativeFocus),
        returnValue: _FakeColor_1(
          this,
          Invocation.getter(#stateNegativeFocus),
        ),
        returnValueForMissingStub: _FakeColor_1(
          this,
          Invocation.getter(#stateNegativeFocus),
        ),
      ) as _i3.Color);

  @override
  _i3.Color get stateInfoEnabled => (super.noSuchMethod(
        Invocation.getter(#stateInfoEnabled),
        returnValue: _FakeColor_1(
          this,
          Invocation.getter(#stateInfoEnabled),
        ),
        returnValueForMissingStub: _FakeColor_1(
          this,
          Invocation.getter(#stateInfoEnabled),
        ),
      ) as _i3.Color);

  @override
  _i3.Color get stateInfoHover => (super.noSuchMethod(
        Invocation.getter(#stateInfoHover),
        returnValue: _FakeColor_1(
          this,
          Invocation.getter(#stateInfoHover),
        ),
        returnValueForMissingStub: _FakeColor_1(
          this,
          Invocation.getter(#stateInfoHover),
        ),
      ) as _i3.Color);

  @override
  _i3.Color get stateInfoSelected => (super.noSuchMethod(
        Invocation.getter(#stateInfoSelected),
        returnValue: _FakeColor_1(
          this,
          Invocation.getter(#stateInfoSelected),
        ),
        returnValueForMissingStub: _FakeColor_1(
          this,
          Invocation.getter(#stateInfoSelected),
        ),
      ) as _i3.Color);

  @override
  _i3.Color get stateInfoFocus => (super.noSuchMethod(
        Invocation.getter(#stateInfoFocus),
        returnValue: _FakeColor_1(
          this,
          Invocation.getter(#stateInfoFocus),
        ),
        returnValueForMissingStub: _FakeColor_1(
          this,
          Invocation.getter(#stateInfoFocus),
        ),
      ) as _i3.Color);

  @override
  _i3.Color get stateInverseEnabled => (super.noSuchMethod(
        Invocation.getter(#stateInverseEnabled),
        returnValue: _FakeColor_1(
          this,
          Invocation.getter(#stateInverseEnabled),
        ),
        returnValueForMissingStub: _FakeColor_1(
          this,
          Invocation.getter(#stateInverseEnabled),
        ),
      ) as _i3.Color);

  @override
  _i3.Color get stateInverseHover => (super.noSuchMethod(
        Invocation.getter(#stateInverseHover),
        returnValue: _FakeColor_1(
          this,
          Invocation.getter(#stateInverseHover),
        ),
        returnValueForMissingStub: _FakeColor_1(
          this,
          Invocation.getter(#stateInverseHover),
        ),
      ) as _i3.Color);

  @override
  _i3.Color get stateInverseSelected => (super.noSuchMethod(
        Invocation.getter(#stateInverseSelected),
        returnValue: _FakeColor_1(
          this,
          Invocation.getter(#stateInverseSelected),
        ),
        returnValueForMissingStub: _FakeColor_1(
          this,
          Invocation.getter(#stateInverseSelected),
        ),
      ) as _i3.Color);

  @override
  _i3.Color get stateInverseFocus => (super.noSuchMethod(
        Invocation.getter(#stateInverseFocus),
        returnValue: _FakeColor_1(
          this,
          Invocation.getter(#stateInverseFocus),
        ),
        returnValueForMissingStub: _FakeColor_1(
          this,
          Invocation.getter(#stateInverseFocus),
        ),
      ) as _i3.Color);

  @override
  _i3.Color get statePositiveEnabled => (super.noSuchMethod(
        Invocation.getter(#statePositiveEnabled),
        returnValue: _FakeColor_1(
          this,
          Invocation.getter(#statePositiveEnabled),
        ),
        returnValueForMissingStub: _FakeColor_1(
          this,
          Invocation.getter(#statePositiveEnabled),
        ),
      ) as _i3.Color);

  @override
  _i3.Color get statePositiveHover => (super.noSuchMethod(
        Invocation.getter(#statePositiveHover),
        returnValue: _FakeColor_1(
          this,
          Invocation.getter(#statePositiveHover),
        ),
        returnValueForMissingStub: _FakeColor_1(
          this,
          Invocation.getter(#statePositiveHover),
        ),
      ) as _i3.Color);

  @override
  _i3.Color get statePositiveSelected => (super.noSuchMethod(
        Invocation.getter(#statePositiveSelected),
        returnValue: _FakeColor_1(
          this,
          Invocation.getter(#statePositiveSelected),
        ),
        returnValueForMissingStub: _FakeColor_1(
          this,
          Invocation.getter(#statePositiveSelected),
        ),
      ) as _i3.Color);

  @override
  _i3.Color get statePositiveFocus => (super.noSuchMethod(
        Invocation.getter(#statePositiveFocus),
        returnValue: _FakeColor_1(
          this,
          Invocation.getter(#statePositiveFocus),
        ),
        returnValueForMissingStub: _FakeColor_1(
          this,
          Invocation.getter(#statePositiveFocus),
        ),
      ) as _i3.Color);
}
