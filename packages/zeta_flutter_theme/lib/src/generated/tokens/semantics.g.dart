// Ignored import due to file being generated
// ignore_for_file: use_named_constants

import 'package:equatable/equatable.dart';
import 'package:flutter/material.dart';
// Ignored import due to file being generated
// ignore: prefer_relative_imports
import 'package:zeta_flutter_theme/zeta_flutter_theme.dart';

// This file is automatically generated by the zeta repository
// DO NOT MODIFY

/// The semantic tokens for colors
abstract interface class ZetaColors {
  /// Primitives used to construct semantic colors
  ZetaPrimitives get primitives;

  /// main/default
  ///
  /// Default value is `cool.shade90`
  ///
  /// * Light Mode: #1d1e23
  /// * Dark Mode: #f3f6fa
  ///
  /// Default high contrast (AAA) value is `cool.shade100`
  ///
  /// * Light Mode: #0c0d0e
  /// * Dark Mode: #f8fbff
  Color get mainDefault;

  /// main/subtle
  ///
  /// Default value is `cool.shade70`
  ///
  /// * Light Mode: #545963
  /// * Dark Mode: #bbc1cb
  ///
  /// Default high contrast (AAA) value is `cool.shade90`
  ///
  /// * Light Mode: #1d1e23
  /// * Dark Mode: #f3f6fa
  Color get mainSubtle;

  /// main/primary
  ///
  /// Default value is `primary.shade60`
  ///
  /// * Light Mode: #0073e6
  /// * Dark Mode: #599fe5
  ///
  /// Default high contrast (AAA) value is `primary.shade80`
  ///
  /// * Light Mode: #004d99
  /// * Dark Mode: #b7dbff
  Color get mainPrimary;

  /// main/secondary
  ///
  /// Default value is `secondary.shade60`
  ///
  /// * Light Mode: #8d7400
  /// * Dark Mode: #c2a728
  ///
  /// Default high contrast (AAA) value is `secondary.shade80`
  ///
  /// * Light Mode: #564908
  /// * Dark Mode: #f3d961
  Color get mainSecondary;

  /// main/positive
  ///
  /// Default value is `green.shade60`
  ///
  /// * Light Mode: #00864f
  /// * Dark Mode: #67b796
  ///
  /// Default high contrast (AAA) value is `green.shade80`
  ///
  /// * Light Mode: #005f38
  /// * Dark Mode: #beefdb
  Color get mainPositive;

  /// main/warning
  ///
  /// Default value is `orange.shade60`
  ///
  /// * Light Mode: #ae6500
  /// * Dark Mode: #d78d26
  ///
  /// Default high contrast (AAA) value is `orange.shade80`
  ///
  /// * Light Mode: #764502
  /// * Dark Mode: #ffd292
  Color get mainWarning;

  /// main/negative
  ///
  /// Default value is `red.shade60`
  ///
  /// * Light Mode: #d70015
  /// * Dark Mode: #f36170
  ///
  /// Default high contrast (AAA) value is `red.shade80`
  ///
  /// * Light Mode: #8f000e
  /// * Dark Mode: #ffb3bb
  Color get mainNegative;

  /// main/info
  ///
  /// Default value is `purple.shade60`
  ///
  /// * Light Mode: #7e0cff
  /// * Dark Mode: #9b71df
  ///
  /// Default high contrast (AAA) value is `purple.shade80`
  ///
  /// * Light Mode: #43008f
  /// * Dark Mode: #dcc1fb
  Color get mainInfo;

  /// main/disabled
  ///
  /// Default value is `cool.shade50`
  ///
  /// * Light Mode: #8d95a3
  /// * Dark Mode: #7a8190
  ///
  /// Default high contrast (AAA) value is `cool.shade60`
  ///
  /// * Light Mode: #7a8190
  /// * Dark Mode: #8d95a3
  Color get mainDisabled;

  /// main/light
  ///
  /// Default value is `cool.shade30`
  ///
  /// * Light Mode: #e0e3e9
  /// * Dark Mode: #2c2f36
  ///
  /// Default high contrast (AAA) value is `pure.shade0`
  ///
  /// * Light Mode: #ffffff
  /// * Dark Mode: #151519
  Color get mainLight;

  /// main/inverse
  ///
  /// Default value is `cool.shade20`
  ///
  /// * Light Mode: #f3f6fa
  /// * Dark Mode: #1d1e23
  ///
  /// Default high contrast (AAA) value is `pure.shade0`
  ///
  /// * Light Mode: #ffffff
  /// * Dark Mode: #151519
  Color get mainInverse;

  /// border/default
  ///
  /// Default value is `cool.shade40`
  ///
  /// * Light Mode: #ced2db
  /// * Dark Mode: #545963
  ///
  /// Default high contrast (AAA) value is `cool.shade100`
  ///
  /// * Light Mode: #0c0d0e
  /// * Dark Mode: #f8fbff
  Color get borderDefault;

  /// border/selected
  ///
  /// Default value is `cool.shade90`
  ///
  /// * Light Mode: #1d1e23
  /// * Dark Mode: #f3f6fa
  ///
  /// Default high contrast (AAA) value is `cool.shade90`
  ///
  /// * Light Mode: #1d1e23
  /// * Dark Mode: #f3f6fa
  Color get borderSelected;

  /// border/hover
  ///
  /// Default value is `cool.shade90`
  ///
  /// * Light Mode: #1d1e23
  /// * Dark Mode: #f3f6fa
  ///
  /// Default high contrast (AAA) value is `cool.shade90`
  ///
  /// * Light Mode: #1d1e23
  /// * Dark Mode: #f3f6fa
  Color get borderHover;

  /// border/subtle
  ///
  /// Default value is `cool.shade30`
  ///
  /// * Light Mode: #e0e3e9
  /// * Dark Mode: #2c2f36
  ///
  /// Default high contrast (AAA) value is `cool.shade80`
  ///
  /// * Light Mode: #2c2f36
  /// * Dark Mode: #e0e3e9
  Color get borderSubtle;

  /// border/disabled
  ///
  /// Default value is `cool.shade20`
  ///
  /// * Light Mode: #f3f6fa
  /// * Dark Mode: #1d1e23
  ///
  /// Default high contrast (AAA) value is `cool.shade20`
  ///
  /// * Light Mode: #f3f6fa
  /// * Dark Mode: #1d1e23
  Color get borderDisabled;

  /// border/pure
  ///
  /// Default value is `pure.shade0`
  ///
  /// * Light Mode: #ffffff
  /// * Dark Mode: #151519
  ///
  /// Default high contrast (AAA) value is `pure.shade0`
  ///
  /// * Light Mode: #ffffff
  /// * Dark Mode: #151519
  Color get borderPure;

  /// border/primary-main
  ///
  /// Default value is `primary.shade60`
  ///
  /// * Light Mode: #0073e6
  /// * Dark Mode: #599fe5
  ///
  /// Default high contrast (AAA) value is `primary.shade80`
  ///
  /// * Light Mode: #004d99
  /// * Dark Mode: #b7dbff
  Color get borderPrimaryMain;

  /// border/primary
  ///
  /// Default value is `primary.shade50`
  ///
  /// * Light Mode: #599fe5
  /// * Dark Mode: #0073e6
  ///
  /// Default high contrast (AAA) value is `primary.shade70`
  ///
  /// * Light Mode: #0061c2
  /// * Dark Mode: #7ebeff
  Color get borderPrimary;

  /// border/secondary
  ///
  /// Default value is `secondary.shade50`
  ///
  /// * Light Mode: #c2a728
  /// * Dark Mode: #8d7400
  ///
  /// Default high contrast (AAA) value is `secondary.shade70`
  ///
  /// * Light Mode: #766200
  /// * Dark Mode: #dbb91c
  Color get borderSecondary;

  /// border/positive
  ///
  /// Default value is `green.shade50`
  ///
  /// * Light Mode: #67b796
  /// * Dark Mode: #00864f
  ///
  /// Default high contrast (AAA) value is `green.shade70`
  ///
  /// * Light Mode: #006d3f
  /// * Dark Mode: #84dab6
  Color get borderPositive;

  /// border/warning
  ///
  /// Default value is `orange.shade50`
  ///
  /// * Light Mode: #f5a230
  /// * Dark Mode: #ae6500
  ///
  /// Default high contrast (AAA) value is `orange.shade70`
  ///
  /// * Light Mode: #965802
  /// * Dark Mode: #ffb348
  Color get borderWarning;

  /// border/negative
  ///
  /// Default value is `red.shade50`
  ///
  /// * Light Mode: #f36170
  /// * Dark Mode: #d70015
  ///
  /// Default high contrast (AAA) value is `red.shade70`
  ///
  /// * Light Mode: #b50012
  /// * Dark Mode: #f98c97
  Color get borderNegative;

  /// border/info
  ///
  /// Default value is `purple.shade50`
  ///
  /// * Light Mode: #9b71df
  /// * Dark Mode: #7e0cff
  ///
  /// Default high contrast (AAA) value is `purple.shade70`
  ///
  /// * Light Mode: #6400d6
  /// * Dark Mode: #cea4ff
  Color get borderInfo;

  /// surface/default
  ///
  /// Default value is `pure.shade0`
  ///
  /// * Light Mode: #ffffff
  /// * Dark Mode: #151519
  ///
  /// Default high contrast (AAA) value is `pure.shade0`
  ///
  /// * Light Mode: #ffffff
  /// * Dark Mode: #151519
  Color get surfaceDefault;

  /// surface/default-inverse
  ///
  /// Default value is `warm.shade100`
  ///
  /// * Light Mode: #151519
  /// * Dark Mode: #fafafa
  ///
  /// Default high contrast (AAA) value is `pure.shade1000`
  ///
  /// * Light Mode: #151519
  /// * Dark Mode: #ffffff
  Color get surfaceDefaultInverse;

  /// surface/hover
  ///
  /// Default value is `cool.shade20`
  ///
  /// * Light Mode: #f3f6fa
  /// * Dark Mode: #1d1e23
  ///
  /// Default high contrast (AAA) value is `cool.shade20`
  ///
  /// * Light Mode: #f3f6fa
  /// * Dark Mode: #1d1e23
  Color get surfaceHover;

  /// surface/selected
  ///
  /// Default value is `blue.shade10`
  ///
  /// * Light Mode: #f1f8ff
  /// * Dark Mode: #101b25
  ///
  /// Default high contrast (AAA) value is `blue.shade10`
  ///
  /// * Light Mode: #f1f8ff
  /// * Dark Mode: #101b25
  Color get surfaceSelected;

  /// surface/selected-hover
  ///
  /// Default value is `blue.shade20`
  ///
  /// * Light Mode: #e2f1ff
  /// * Dark Mode: #002c58
  ///
  /// Default high contrast (AAA) value is `blue.shade20`
  ///
  /// * Light Mode: #e2f1ff
  /// * Dark Mode: #002c58
  Color get surfaceSelectedHover;

  /// surface/disabled
  ///
  /// Default value is `cool.shade30`
  ///
  /// * Light Mode: #e0e3e9
  /// * Dark Mode: #2c2f36
  ///
  /// Default high contrast (AAA) value is `cool.shade30`
  ///
  /// * Light Mode: #e0e3e9
  /// * Dark Mode: #2c2f36
  Color get surfaceDisabled;

  /// surface/cool
  ///
  /// Default value is `cool.shade10`
  ///
  /// * Light Mode: #f8fbff
  /// * Dark Mode: #0c0d0e
  ///
  /// Default high contrast (AAA) value is `cool.shade10`
  ///
  /// * Light Mode: #f8fbff
  /// * Dark Mode: #0c0d0e
  Color get surfaceCool;

  /// surface/warm
  ///
  /// Default value is `warm.shade10`
  ///
  /// * Light Mode: #fafafa
  /// * Dark Mode: #151519
  ///
  /// Default high contrast (AAA) value is `warm.shade10`
  ///
  /// * Light Mode: #fafafa
  /// * Dark Mode: #151519
  Color get surfaceWarm;

  /// surface/primary
  ///
  /// Default value is `primary.shade60`
  ///
  /// * Light Mode: #0073e6
  /// * Dark Mode: #599fe5
  ///
  /// Default high contrast (AAA) value is `primary.shade80`
  ///
  /// * Light Mode: #004d99
  /// * Dark Mode: #b7dbff
  Color get surfacePrimary;

  /// surface/primary-subtle
  ///
  /// Default value is `primary.shade10`
  ///
  /// * Light Mode: #f1f8ff
  /// * Dark Mode: #101b25
  ///
  /// Default high contrast (AAA) value is `primary.shade10`
  ///
  /// * Light Mode: #f1f8ff
  /// * Dark Mode: #101b25
  Color get surfacePrimarySubtle;

  /// surface/secondary
  ///
  /// Default value is `secondary.shade60`
  ///
  /// * Light Mode: #8d7400
  /// * Dark Mode: #c2a728
  ///
  /// Default high contrast (AAA) value is `secondary.shade80`
  ///
  /// * Light Mode: #564908
  /// * Dark Mode: #f3d961
  Color get surfaceSecondary;

  /// surface/avatar/blue
  ///
  /// Default value is `blue.shade80`
  ///
  /// * Light Mode: #004d99
  /// * Dark Mode: #b7dbff
  ///
  /// Default high contrast (AAA) value is `blue.shade80`
  ///
  /// * Light Mode: #004d99
  /// * Dark Mode: #b7dbff
  Color get surfaceAvatarBlue;

  /// surface/avatar/green
  ///
  /// Default value is `green.shade60`
  ///
  /// * Light Mode: #00864f
  /// * Dark Mode: #67b796
  ///
  /// Default high contrast (AAA) value is `green.shade60`
  ///
  /// * Light Mode: #00864f
  /// * Dark Mode: #67b796
  Color get surfaceAvatarGreen;

  /// surface/avatar/orange
  ///
  /// Default value is `orange.shade50`
  ///
  /// * Light Mode: #f5a230
  /// * Dark Mode: #ae6500
  ///
  /// Default high contrast (AAA) value is `orange.shade50`
  ///
  /// * Light Mode: #f5a230
  /// * Dark Mode: #ae6500
  Color get surfaceAvatarOrange;

  /// surface/avatar/pink
  ///
  /// Default value is `pink.shade80`
  ///
  /// * Light Mode: #840054
  /// * Dark Mode: #ffbee7
  ///
  /// Default high contrast (AAA) value is `pink.shade80`
  ///
  /// * Light Mode: #840054
  /// * Dark Mode: #ffbee7
  Color get surfaceAvatarPink;

  /// surface/avatar/purple
  ///
  /// Default value is `purple.shade80`
  ///
  /// * Light Mode: #43008f
  /// * Dark Mode: #dcc1fb
  ///
  /// Default high contrast (AAA) value is `purple.shade80`
  ///
  /// * Light Mode: #43008f
  /// * Dark Mode: #dcc1fb
  Color get surfaceAvatarPurple;

  /// surface/avatar/teal
  ///
  /// Default value is `teal.shade80`
  ///
  /// * Light Mode: #005b5b
  /// * Dark Mode: #bcfbfb
  ///
  /// Default high contrast (AAA) value is `teal.shade80`
  ///
  /// * Light Mode: #005b5b
  /// * Dark Mode: #bcfbfb
  Color get surfaceAvatarTeal;

  /// surface/avatar/yellow
  ///
  /// Default value is `yellow.shade50`
  ///
  /// * Light Mode: #c2a728
  /// * Dark Mode: #8d7400
  ///
  /// Default high contrast (AAA) value is `yellow.shade50`
  ///
  /// * Light Mode: #c2a728
  /// * Dark Mode: #8d7400
  Color get surfaceAvatarYellow;

  /// surface/secondary-subtle
  ///
  /// Default value is `secondary.shade10`
  ///
  /// * Light Mode: #fff7d4
  /// * Dark Mode: #181400
  ///
  /// Default high contrast (AAA) value is `secondary.shade10`
  ///
  /// * Light Mode: #fff7d4
  /// * Dark Mode: #181400
  Color get surfaceSecondarySubtle;

  /// surface/positive
  ///
  /// Default value is `green.shade60`
  ///
  /// * Light Mode: #00864f
  /// * Dark Mode: #67b796
  ///
  /// Default high contrast (AAA) value is `green.shade80`
  ///
  /// * Light Mode: #005f38
  /// * Dark Mode: #beefdb
  Color get surfacePositive;

  /// surface/positive-subtle
  ///
  /// Default value is `green.shade10`
  ///
  /// * Light Mode: #ecfff7
  /// * Dark Mode: #081711
  ///
  /// Default high contrast (AAA) value is `green.shade10`
  ///
  /// * Light Mode: #ecfff7
  /// * Dark Mode: #081711
  Color get surfacePositiveSubtle;

  /// surface/warning
  ///
  /// Default value is `orange.shade60`
  ///
  /// * Light Mode: #ae6500
  /// * Dark Mode: #d78d26
  ///
  /// Default high contrast (AAA) value is `orange.shade80`
  ///
  /// * Light Mode: #764502
  /// * Dark Mode: #ffd292
  Color get surfaceWarning;

  /// surface/warning-subtle
  ///
  /// Default value is `orange.shade10`
  ///
  /// * Light Mode: #fef2e2
  /// * Dark Mode: #1e1100
  ///
  /// Default high contrast (AAA) value is `orange.shade10`
  ///
  /// * Light Mode: #fef2e2
  /// * Dark Mode: #1e1100
  Color get surfaceWarningSubtle;

  /// surface/negative
  ///
  /// Default value is `red.shade60`
  ///
  /// * Light Mode: #d70015
  /// * Dark Mode: #f36170
  ///
  /// Default high contrast (AAA) value is `red.shade80`
  ///
  /// * Light Mode: #8f000e
  /// * Dark Mode: #ffb3bb
  Color get surfaceNegative;

  /// surface/negative-subtle
  ///
  /// Default value is `red.shade10`
  ///
  /// * Light Mode: #fff0f1
  /// * Dark Mode: #220f11
  ///
  /// Default high contrast (AAA) value is `red.shade10`
  ///
  /// * Light Mode: #fff0f1
  /// * Dark Mode: #220f11
  Color get surfaceNegativeSubtle;

  /// surface/info
  ///
  /// Default value is `purple.shade60`
  ///
  /// * Light Mode: #7e0cff
  /// * Dark Mode: #9b71df
  ///
  /// Default high contrast (AAA) value is `purple.shade80`
  ///
  /// * Light Mode: #43008f
  /// * Dark Mode: #dcc1fb
  Color get surfaceInfo;

  /// surface/info-subtle
  ///
  /// Default value is `purple.shade10`
  ///
  /// * Light Mode: #f7f0ff
  /// * Dark Mode: #180f22
  ///
  /// Default high contrast (AAA) value is `purple.shade10`
  ///
  /// * Light Mode: #f7f0ff
  /// * Dark Mode: #180f22
  Color get surfaceInfoSubtle;

  /// state/disabled/disabled
  ///
  /// Default value is `cool.shade30`
  ///
  /// * Light Mode: #e0e3e9
  /// * Dark Mode: #2c2f36
  ///
  /// Default high contrast (AAA) value is `cool.shade30`
  ///
  /// * Light Mode: #e0e3e9
  /// * Dark Mode: #2c2f36
  Color get stateDisabledDisabled;

  /// state/default/enabled
  ///
  /// Default value is `pure.shade0`
  ///
  /// * Light Mode: #ffffff
  /// * Dark Mode: #151519
  ///
  /// Default high contrast (AAA) value is `pure.shade0`
  ///
  /// * Light Mode: #ffffff
  /// * Dark Mode: #151519
  Color get stateDefaultEnabled;

  /// state/default/hover
  ///
  /// Default value is `cool.shade20`
  ///
  /// * Light Mode: #f3f6fa
  /// * Dark Mode: #1d1e23
  ///
  /// Default high contrast (AAA) value is `cool.shade20`
  ///
  /// * Light Mode: #f3f6fa
  /// * Dark Mode: #1d1e23
  Color get stateDefaultHover;

  /// state/default/selected
  ///
  /// Default value is `blue.shade10`
  ///
  /// * Light Mode: #f1f8ff
  /// * Dark Mode: #101b25
  ///
  /// Default high contrast (AAA) value is `blue.shade10`
  ///
  /// * Light Mode: #f1f8ff
  /// * Dark Mode: #101b25
  Color get stateDefaultSelected;

  /// state/default/focus
  ///
  /// Default value is `pure.shade0`
  ///
  /// * Light Mode: #ffffff
  /// * Dark Mode: #151519
  ///
  /// Default high contrast (AAA) value is `pure.shade0`
  ///
  /// * Light Mode: #ffffff
  /// * Dark Mode: #151519
  Color get stateDefaultFocus;

  /// state/primary/enabled
  ///
  /// Default value is `primary.shade60`
  ///
  /// * Light Mode: #0073e6
  /// * Dark Mode: #599fe5
  ///
  /// Default high contrast (AAA) value is `primary.shade80`
  ///
  /// * Light Mode: #004d99
  /// * Dark Mode: #b7dbff
  Color get statePrimaryEnabled;

  /// state/primary/hover
  ///
  /// Default value is `primary.shade50`
  ///
  /// * Light Mode: #599fe5
  /// * Dark Mode: #0073e6
  ///
  /// Default high contrast (AAA) value is `primary.shade70`
  ///
  /// * Light Mode: #0061c2
  /// * Dark Mode: #7ebeff
  Color get statePrimaryHover;

  /// state/primary/selected
  ///
  /// Default value is `primary.shade70`
  ///
  /// * Light Mode: #0061c2
  /// * Dark Mode: #7ebeff
  ///
  /// Default high contrast (AAA) value is `primary.shade90`
  ///
  /// * Light Mode: #002c58
  /// * Dark Mode: #e2f1ff
  Color get statePrimarySelected;

  /// state/primary/focus
  ///
  /// Default value is `primary.shade60`
  ///
  /// * Light Mode: #0073e6
  /// * Dark Mode: #599fe5
  ///
  /// Default high contrast (AAA) value is `primary.shade80`
  ///
  /// * Light Mode: #004d99
  /// * Dark Mode: #b7dbff
  Color get statePrimaryFocus;

  /// state/secondary/enabled
  ///
  /// Default value is `secondary.shade40`
  ///
  /// * Light Mode: #dbb91c
  /// * Dark Mode: #766200
  ///
  /// Default high contrast (AAA) value is `secondary.shade80`
  ///
  /// * Light Mode: #564908
  /// * Dark Mode: #f3d961
  Color get stateSecondaryEnabled;

  /// state/secondary/hover
  ///
  /// Default value is `secondary.shade30`
  ///
  /// * Light Mode: #f3d961
  /// * Dark Mode: #564908
  ///
  /// Default high contrast (AAA) value is `secondary.shade70`
  ///
  /// * Light Mode: #766200
  /// * Dark Mode: #dbb91c
  Color get stateSecondaryHover;

  /// state/secondary/selected
  ///
  /// Default value is `secondary.shade50`
  ///
  /// * Light Mode: #c2a728
  /// * Dark Mode: #8d7400
  ///
  /// Default high contrast (AAA) value is `secondary.shade90`
  ///
  /// * Light Mode: #352b00
  /// * Dark Mode: #ffea89
  Color get stateSecondarySelected;

  /// state/secondary/focus
  ///
  /// Default value is `secondary.shade40`
  ///
  /// * Light Mode: #dbb91c
  /// * Dark Mode: #766200
  ///
  /// Default high contrast (AAA) value is `secondary.shade80`
  ///
  /// * Light Mode: #564908
  /// * Dark Mode: #f3d961
  Color get stateSecondaryFocus;

  /// state/negative/enabled
  ///
  /// Default value is `red.shade60`
  ///
  /// * Light Mode: #d70015
  /// * Dark Mode: #f36170
  ///
  /// Default high contrast (AAA) value is `red.shade80`
  ///
  /// * Light Mode: #8f000e
  /// * Dark Mode: #ffb3bb
  Color get stateNegativeEnabled;

  /// state/negative/hover
  ///
  /// Default value is `red.shade50`
  ///
  /// * Light Mode: #f36170
  /// * Dark Mode: #d70015
  ///
  /// Default high contrast (AAA) value is `red.shade70`
  ///
  /// * Light Mode: #b50012
  /// * Dark Mode: #f98c97
  Color get stateNegativeHover;

  /// state/negative/selected
  ///
  /// Default value is `red.shade70`
  ///
  /// * Light Mode: #b50012
  /// * Dark Mode: #f98c97
  ///
  /// Default high contrast (AAA) value is `red.shade90`
  ///
  /// * Light Mode: #520008
  /// * Dark Mode: #ffe1e4
  Color get stateNegativeSelected;

  /// state/negative/focus
  ///
  /// Default value is `red.shade60`
  ///
  /// * Light Mode: #d70015
  /// * Dark Mode: #f36170
  ///
  /// Default high contrast (AAA) value is `red.shade80`
  ///
  /// * Light Mode: #8f000e
  /// * Dark Mode: #ffb3bb
  Color get stateNegativeFocus;

  /// state/info/enabled
  ///
  /// Default value is `purple.shade60`
  ///
  /// * Light Mode: #7e0cff
  /// * Dark Mode: #9b71df
  ///
  /// Default high contrast (AAA) value is `purple.shade80`
  ///
  /// * Light Mode: #43008f
  /// * Dark Mode: #dcc1fb
  Color get stateInfoEnabled;

  /// state/info/hover
  ///
  /// Default value is `purple.shade50`
  ///
  /// * Light Mode: #9b71df
  /// * Dark Mode: #7e0cff
  ///
  /// Default high contrast (AAA) value is `purple.shade70`
  ///
  /// * Light Mode: #6400d6
  /// * Dark Mode: #cea4ff
  Color get stateInfoHover;

  /// state/info/selected
  ///
  /// Default value is `purple.shade70`
  ///
  /// * Light Mode: #6400d6
  /// * Dark Mode: #cea4ff
  ///
  /// Default high contrast (AAA) value is `purple.shade90`
  ///
  /// * Light Mode: #260052
  /// * Dark Mode: #efe1ff
  Color get stateInfoSelected;

  /// state/info/focus
  ///
  /// Default value is `purple.shade60`
  ///
  /// * Light Mode: #7e0cff
  /// * Dark Mode: #9b71df
  ///
  /// Default high contrast (AAA) value is `purple.shade80`
  ///
  /// * Light Mode: #43008f
  /// * Dark Mode: #dcc1fb
  Color get stateInfoFocus;

  /// state/inverse/enabled
  ///
  /// Default value is `cool.shade100`
  ///
  /// * Light Mode: #0c0d0e
  /// * Dark Mode: #f8fbff
  ///
  /// Default high contrast (AAA) value is `pure.shade1000`
  ///
  /// * Light Mode: #151519
  /// * Dark Mode: #ffffff
  Color get stateInverseEnabled;

  /// state/inverse/hover
  ///
  /// Default value is `cool.shade90`
  ///
  /// * Light Mode: #1d1e23
  /// * Dark Mode: #f3f6fa
  ///
  /// Default high contrast (AAA) value is `cool.shade90`
  ///
  /// * Light Mode: #1d1e23
  /// * Dark Mode: #f3f6fa
  Color get stateInverseHover;

  /// state/inverse/selected
  ///
  /// Default value is `cool.shade100`
  ///
  /// * Light Mode: #0c0d0e
  /// * Dark Mode: #f8fbff
  ///
  /// Default high contrast (AAA) value is `pure.shade1000`
  ///
  /// * Light Mode: #151519
  /// * Dark Mode: #ffffff
  Color get stateInverseSelected;

  /// state/inverse/focus
  ///
  /// Default value is `cool.shade100`
  ///
  /// * Light Mode: #0c0d0e
  /// * Dark Mode: #f8fbff
  ///
  /// Default high contrast (AAA) value is `pure.shade1000`
  ///
  /// * Light Mode: #151519
  /// * Dark Mode: #ffffff
  Color get stateInverseFocus;

  /// state/positive/enabled
  ///
  /// Default value is `green.shade60`
  ///
  /// * Light Mode: #00864f
  /// * Dark Mode: #67b796
  ///
  /// Default high contrast (AAA) value is `green.shade80`
  ///
  /// * Light Mode: #005f38
  /// * Dark Mode: #beefdb
  Color get statePositiveEnabled;

  /// state/positive/hover
  ///
  /// Default value is `green.shade50`
  ///
  /// * Light Mode: #67b796
  /// * Dark Mode: #00864f
  ///
  /// Default high contrast (AAA) value is `green.shade70`
  ///
  /// * Light Mode: #006d3f
  /// * Dark Mode: #84dab6
  Color get statePositiveHover;

  /// state/positive/selected
  ///
  /// Default value is `green.shade70`
  ///
  /// * Light Mode: #006d3f
  /// * Dark Mode: #84dab6
  ///
  /// Default high contrast (AAA) value is `green.shade90`
  ///
  /// * Light Mode: #00331e
  /// * Dark Mode: #d8ffef
  Color get statePositiveSelected;

  /// state/positive/focus
  ///
  /// Default value is `green.shade60`
  ///
  /// * Light Mode: #00864f
  /// * Dark Mode: #67b796
  ///
  /// Default high contrast (AAA) value is `green.shade80`
  ///
  /// * Light Mode: #005f38
  /// * Dark Mode: #beefdb
  Color get statePositiveFocus;
}

/// The semantic tokens for spacing
abstract interface class ZetaSpacing {
  /// Primitives used to construct semantic spacing
  ZetaPrimitives get primitives;

  /// spacing/none
  ///
  /// Default value is [ZetaPrimitives.x0] (0)
  double get none;

  /// spacing/minimum
  ///
  /// Default value is [ZetaPrimitives.x1] (4)
  double get minimum;

  /// spacing/small
  ///
  /// Default value is [ZetaPrimitives.x2] (8)
  double get small;

  /// spacing/medium
  ///
  /// Default value is [ZetaPrimitives.x3] (12)
  double get medium;

  /// spacing/large
  ///
  /// Default value is [ZetaPrimitives.x4] (16)
  double get large;

  /// spacing/xl
  ///
  /// Default value is [ZetaPrimitives.x5] (20)
  double get xl;

  /// spacing/2xl
  ///
  /// Default value is [ZetaPrimitives.x6] (24)
  double get xl_2;

  /// spacing/3xl
  ///
  /// Default value is [ZetaPrimitives.x7] (28)
  double get xl_3;

  /// spacing/4xl
  ///
  /// Default value is [ZetaPrimitives.x8] (32)
  double get xl_4;

  /// spacing/5xl
  ///
  /// Default value is [ZetaPrimitives.x9] (36)
  double get xl_5;

  /// spacing/6xl
  ///
  /// Default value is [ZetaPrimitives.x10] (40)
  double get xl_6;

  /// spacing/7xl
  ///
  /// Default value is [ZetaPrimitives.x11] (44)
  double get xl_7;

  /// spacing/8xl
  ///
  /// Default value is [ZetaPrimitives.x12] (48)
  double get xl_8;

  /// spacing/9xl
  ///
  /// Default value is [ZetaPrimitives.x13] (64)
  double get xl_9;

  /// spacing/10xl
  ///
  /// Default value is [ZetaPrimitives.x14] (80)
  double get xl_10;

  /// spacing/11xl
  ///
  /// Default value is [ZetaPrimitives.x15] (96)
  double get xl_11;
}

/// The semantic tokens for radius
abstract interface class ZetaRadius {
  /// Primitives used to construct semantic radius
  ZetaPrimitives get primitives;

  /// radius/none
  ///
  /// Default value is [ZetaPrimitives.r_0] (0)
  ///
  /// Default high contrast (AAA) value is 0
  Radius get none;

  /// radius/minimal
  ///
  /// Default value is [ZetaPrimitives.s] (4)
  ///
  /// Default high contrast (AAA) value is 0
  Radius get minimal;

  /// radius/rounded
  ///
  /// Default value is [ZetaPrimitives.m] (8)
  ///
  /// Default high contrast (AAA) value is 0
  Radius get rounded;

  /// radius/large
  ///
  /// Default value is [ZetaPrimitives.l] (16)
  ///
  /// Default high contrast (AAA) value is 0
  Radius get large;

  /// radius/xl
  ///
  /// Default value is [ZetaPrimitives.xl] (24)
  ///
  /// Default high contrast (AAA) value is 0
  Radius get xl;

  /// radius/full
  ///
  /// Default value is [ZetaPrimitives.xl_4] (360)
  ///
  /// Default high contrast (AAA) value is 0
  Radius get full;
}

/// The semantic colors for AA
class ZetaColorsAA extends Equatable implements ZetaColors {
  /// Constructor for [ZetaColorsAA]
  const ZetaColorsAA({required this.primitives});
  @override
  final ZetaPrimitives primitives;
  @override
  Color get mainDefault => primitives.cool.shade90;
  @override
  Color get mainSubtle => primitives.cool.shade70;
  @override
  Color get mainPrimary => primitives.primary.shade60;
  @override
  Color get mainSecondary => primitives.secondary.shade60;
  @override
  Color get mainPositive => primitives.green.shade60;
  @override
  Color get mainWarning => primitives.orange.shade60;
  @override
  Color get mainNegative => primitives.red.shade60;
  @override
  Color get mainInfo => primitives.purple.shade60;
  @override
  Color get mainDisabled => primitives.cool.shade50;
  @override
  Color get mainLight => primitives.cool.shade30;
  @override
  Color get mainInverse => primitives.cool.shade20;
  @override
  Color get borderDefault => primitives.cool.shade40;
  @override
  Color get borderSelected => primitives.cool.shade90;
  @override
  Color get borderHover => primitives.cool.shade90;
  @override
  Color get borderSubtle => primitives.cool.shade30;
  @override
  Color get borderDisabled => primitives.cool.shade20;
  @override
  Color get borderPure => primitives.pure.shade0;
  @override
  Color get borderPrimaryMain => primitives.primary.shade60;
  @override
  Color get borderPrimary => primitives.primary.shade50;
  @override
  Color get borderSecondary => primitives.secondary.shade50;
  @override
  Color get borderPositive => primitives.green.shade50;
  @override
  Color get borderWarning => primitives.orange.shade50;
  @override
  Color get borderNegative => primitives.red.shade50;
  @override
  Color get borderInfo => primitives.purple.shade50;
  @override
  Color get surfaceDefault => primitives.pure.shade0;
  @override
  Color get surfaceDefaultInverse => primitives.warm.shade100;
  @override
  Color get surfaceHover => primitives.cool.shade20;
  @override
  Color get surfaceSelected => primitives.blue.shade10;
  @override
  Color get surfaceSelectedHover => primitives.blue.shade20;
  @override
  Color get surfaceDisabled => primitives.cool.shade30;
  @override
  Color get surfaceCool => primitives.cool.shade10;
  @override
  Color get surfaceWarm => primitives.warm.shade10;
  @override
  Color get surfacePrimary => primitives.primary.shade60;
  @override
  Color get surfacePrimarySubtle => primitives.primary.shade10;
  @override
  Color get surfaceSecondary => primitives.secondary.shade60;
  @override
  Color get surfaceAvatarBlue => primitives.blue.shade80;
  @override
  Color get surfaceAvatarGreen => primitives.green.shade60;
  @override
  Color get surfaceAvatarOrange => primitives.orange.shade50;
  @override
  Color get surfaceAvatarPink => primitives.pink.shade80;
  @override
  Color get surfaceAvatarPurple => primitives.purple.shade80;
  @override
  Color get surfaceAvatarTeal => primitives.teal.shade80;
  @override
  Color get surfaceAvatarYellow => primitives.yellow.shade50;
  @override
  Color get surfaceSecondarySubtle => primitives.secondary.shade10;
  @override
  Color get surfacePositive => primitives.green.shade60;
  @override
  Color get surfacePositiveSubtle => primitives.green.shade10;
  @override
  Color get surfaceWarning => primitives.orange.shade60;
  @override
  Color get surfaceWarningSubtle => primitives.orange.shade10;
  @override
  Color get surfaceNegative => primitives.red.shade60;
  @override
  Color get surfaceNegativeSubtle => primitives.red.shade10;
  @override
  Color get surfaceInfo => primitives.purple.shade60;
  @override
  Color get surfaceInfoSubtle => primitives.purple.shade10;
  @override
  Color get stateDisabledDisabled => primitives.cool.shade30;
  @override
  Color get stateDefaultEnabled => primitives.pure.shade0;
  @override
  Color get stateDefaultHover => primitives.cool.shade20;
  @override
  Color get stateDefaultSelected => primitives.blue.shade10;
  @override
  Color get stateDefaultFocus => primitives.pure.shade0;
  @override
  Color get statePrimaryEnabled => primitives.primary.shade60;
  @override
  Color get statePrimaryHover => primitives.primary.shade50;
  @override
  Color get statePrimarySelected => primitives.primary.shade70;
  @override
  Color get statePrimaryFocus => primitives.primary.shade60;
  @override
  Color get stateSecondaryEnabled => primitives.secondary.shade40;
  @override
  Color get stateSecondaryHover => primitives.secondary.shade30;
  @override
  Color get stateSecondarySelected => primitives.secondary.shade50;
  @override
  Color get stateSecondaryFocus => primitives.secondary.shade40;
  @override
  Color get stateNegativeEnabled => primitives.red.shade60;
  @override
  Color get stateNegativeHover => primitives.red.shade50;
  @override
  Color get stateNegativeSelected => primitives.red.shade70;
  @override
  Color get stateNegativeFocus => primitives.red.shade60;
  @override
  Color get stateInfoEnabled => primitives.purple.shade60;
  @override
  Color get stateInfoHover => primitives.purple.shade50;
  @override
  Color get stateInfoSelected => primitives.purple.shade70;
  @override
  Color get stateInfoFocus => primitives.purple.shade60;
  @override
  Color get stateInverseEnabled => primitives.cool.shade100;
  @override
  Color get stateInverseHover => primitives.cool.shade90;
  @override
  Color get stateInverseSelected => primitives.cool.shade100;
  @override
  Color get stateInverseFocus => primitives.cool.shade100;
  @override
  Color get statePositiveEnabled => primitives.green.shade60;
  @override
  Color get statePositiveHover => primitives.green.shade50;
  @override
  Color get statePositiveSelected => primitives.green.shade70;
  @override
  Color get statePositiveFocus => primitives.green.shade60;
  @override
  List<Object?> get props => [
        mainDefault,
        mainSubtle,
        mainPrimary,
        mainSecondary,
        mainPositive,
        mainWarning,
        mainNegative,
        mainInfo,
        mainDisabled,
        mainLight,
        mainInverse,
        borderDefault,
        borderSelected,
        borderHover,
        borderSubtle,
        borderDisabled,
        borderPure,
        borderPrimaryMain,
        borderPrimary,
        borderSecondary,
        borderPositive,
        borderWarning,
        borderNegative,
        borderInfo,
        surfaceDefault,
        surfaceDefaultInverse,
        surfaceHover,
        surfaceSelected,
        surfaceSelectedHover,
        surfaceDisabled,
        surfaceCool,
        surfaceWarm,
        surfacePrimary,
        surfacePrimarySubtle,
        surfaceSecondary,
        surfaceAvatarBlue,
        surfaceAvatarGreen,
        surfaceAvatarOrange,
        surfaceAvatarPink,
        surfaceAvatarPurple,
        surfaceAvatarTeal,
        surfaceAvatarYellow,
        surfaceSecondarySubtle,
        surfacePositive,
        surfacePositiveSubtle,
        surfaceWarning,
        surfaceWarningSubtle,
        surfaceNegative,
        surfaceNegativeSubtle,
        surfaceInfo,
        surfaceInfoSubtle,
        stateDisabledDisabled,
        stateDefaultEnabled,
        stateDefaultHover,
        stateDefaultSelected,
        stateDefaultFocus,
        statePrimaryEnabled,
        statePrimaryHover,
        statePrimarySelected,
        statePrimaryFocus,
        stateSecondaryEnabled,
        stateSecondaryHover,
        stateSecondarySelected,
        stateSecondaryFocus,
        stateNegativeEnabled,
        stateNegativeHover,
        stateNegativeSelected,
        stateNegativeFocus,
        stateInfoEnabled,
        stateInfoHover,
        stateInfoSelected,
        stateInfoFocus,
        stateInverseEnabled,
        stateInverseHover,
        stateInverseSelected,
        stateInverseFocus,
        statePositiveEnabled,
        statePositiveHover,
        statePositiveSelected,
        statePositiveFocus,
      ];
}

/// The semantic colors for AAA
class ZetaColorsAAA extends Equatable implements ZetaColors {
  /// Constructor for [ZetaColorsAAA]
  const ZetaColorsAAA({required this.primitives});
  @override
  final ZetaPrimitives primitives;
  @override
  Color get mainDefault => primitives.cool.shade100;
  @override
  Color get mainSubtle => primitives.cool.shade90;
  @override
  Color get mainPrimary => primitives.primary.shade80;
  @override
  Color get mainSecondary => primitives.secondary.shade80;
  @override
  Color get mainPositive => primitives.green.shade80;
  @override
  Color get mainWarning => primitives.orange.shade80;
  @override
  Color get mainNegative => primitives.red.shade80;
  @override
  Color get mainInfo => primitives.purple.shade80;
  @override
  Color get mainDisabled => primitives.cool.shade60;
  @override
  Color get mainLight => primitives.pure.shade0;
  @override
  Color get mainInverse => primitives.pure.shade0;
  @override
  Color get borderDefault => primitives.cool.shade100;
  @override
  Color get borderSelected => primitives.cool.shade90;
  @override
  Color get borderHover => primitives.cool.shade90;
  @override
  Color get borderSubtle => primitives.cool.shade80;
  @override
  Color get borderDisabled => primitives.cool.shade20;
  @override
  Color get borderPure => primitives.pure.shade0;
  @override
  Color get borderPrimaryMain => primitives.primary.shade80;
  @override
  Color get borderPrimary => primitives.primary.shade70;
  @override
  Color get borderSecondary => primitives.secondary.shade70;
  @override
  Color get borderPositive => primitives.green.shade70;
  @override
  Color get borderWarning => primitives.orange.shade70;
  @override
  Color get borderNegative => primitives.red.shade70;
  @override
  Color get borderInfo => primitives.purple.shade70;
  @override
  Color get surfaceDefault => primitives.pure.shade0;
  @override
  Color get surfaceDefaultInverse => primitives.pure.shade1000;
  @override
  Color get surfaceHover => primitives.cool.shade20;
  @override
  Color get surfaceSelected => primitives.blue.shade10;
  @override
  Color get surfaceSelectedHover => primitives.blue.shade20;
  @override
  Color get surfaceDisabled => primitives.cool.shade30;
  @override
  Color get surfaceCool => primitives.cool.shade10;
  @override
  Color get surfaceWarm => primitives.warm.shade10;
  @override
  Color get surfacePrimary => primitives.primary.shade80;
  @override
  Color get surfacePrimarySubtle => primitives.primary.shade10;
  @override
  Color get surfaceSecondary => primitives.secondary.shade80;
  @override
  Color get surfaceAvatarBlue => primitives.blue.shade80;
  @override
  Color get surfaceAvatarGreen => primitives.green.shade60;
  @override
  Color get surfaceAvatarOrange => primitives.orange.shade50;
  @override
  Color get surfaceAvatarPink => primitives.pink.shade80;
  @override
  Color get surfaceAvatarPurple => primitives.purple.shade80;
  @override
  Color get surfaceAvatarTeal => primitives.teal.shade80;
  @override
  Color get surfaceAvatarYellow => primitives.yellow.shade50;
  @override
  Color get surfaceSecondarySubtle => primitives.secondary.shade10;
  @override
  Color get surfacePositive => primitives.green.shade80;
  @override
  Color get surfacePositiveSubtle => primitives.green.shade10;
  @override
  Color get surfaceWarning => primitives.orange.shade80;
  @override
  Color get surfaceWarningSubtle => primitives.orange.shade10;
  @override
  Color get surfaceNegative => primitives.red.shade80;
  @override
  Color get surfaceNegativeSubtle => primitives.red.shade10;
  @override
  Color get surfaceInfo => primitives.purple.shade80;
  @override
  Color get surfaceInfoSubtle => primitives.purple.shade10;
  @override
  Color get stateDisabledDisabled => primitives.cool.shade30;
  @override
  Color get stateDefaultEnabled => primitives.pure.shade0;
  @override
  Color get stateDefaultHover => primitives.cool.shade20;
  @override
  Color get stateDefaultSelected => primitives.blue.shade10;
  @override
  Color get stateDefaultFocus => primitives.pure.shade0;
  @override
  Color get statePrimaryEnabled => primitives.primary.shade80;
  @override
  Color get statePrimaryHover => primitives.primary.shade70;
  @override
  Color get statePrimarySelected => primitives.primary.shade90;
  @override
  Color get statePrimaryFocus => primitives.primary.shade80;
  @override
  Color get stateSecondaryEnabled => primitives.secondary.shade80;
  @override
  Color get stateSecondaryHover => primitives.secondary.shade70;
  @override
  Color get stateSecondarySelected => primitives.secondary.shade90;
  @override
  Color get stateSecondaryFocus => primitives.secondary.shade80;
  @override
  Color get stateNegativeEnabled => primitives.red.shade80;
  @override
  Color get stateNegativeHover => primitives.red.shade70;
  @override
  Color get stateNegativeSelected => primitives.red.shade90;
  @override
  Color get stateNegativeFocus => primitives.red.shade80;
  @override
  Color get stateInfoEnabled => primitives.purple.shade80;
  @override
  Color get stateInfoHover => primitives.purple.shade70;
  @override
  Color get stateInfoSelected => primitives.purple.shade90;
  @override
  Color get stateInfoFocus => primitives.purple.shade80;
  @override
  Color get stateInverseEnabled => primitives.pure.shade1000;
  @override
  Color get stateInverseHover => primitives.cool.shade90;
  @override
  Color get stateInverseSelected => primitives.pure.shade1000;
  @override
  Color get stateInverseFocus => primitives.pure.shade1000;
  @override
  Color get statePositiveEnabled => primitives.green.shade80;
  @override
  Color get statePositiveHover => primitives.green.shade70;
  @override
  Color get statePositiveSelected => primitives.green.shade90;
  @override
  Color get statePositiveFocus => primitives.green.shade80;
  @override
  List<Object?> get props => [
        mainDefault,
        mainSubtle,
        mainPrimary,
        mainSecondary,
        mainPositive,
        mainWarning,
        mainNegative,
        mainInfo,
        mainDisabled,
        mainLight,
        mainInverse,
        borderDefault,
        borderSelected,
        borderHover,
        borderSubtle,
        borderDisabled,
        borderPure,
        borderPrimaryMain,
        borderPrimary,
        borderSecondary,
        borderPositive,
        borderWarning,
        borderNegative,
        borderInfo,
        surfaceDefault,
        surfaceDefaultInverse,
        surfaceHover,
        surfaceSelected,
        surfaceSelectedHover,
        surfaceDisabled,
        surfaceCool,
        surfaceWarm,
        surfacePrimary,
        surfacePrimarySubtle,
        surfaceSecondary,
        surfaceAvatarBlue,
        surfaceAvatarGreen,
        surfaceAvatarOrange,
        surfaceAvatarPink,
        surfaceAvatarPurple,
        surfaceAvatarTeal,
        surfaceAvatarYellow,
        surfaceSecondarySubtle,
        surfacePositive,
        surfacePositiveSubtle,
        surfaceWarning,
        surfaceWarningSubtle,
        surfaceNegative,
        surfaceNegativeSubtle,
        surfaceInfo,
        surfaceInfoSubtle,
        stateDisabledDisabled,
        stateDefaultEnabled,
        stateDefaultHover,
        stateDefaultSelected,
        stateDefaultFocus,
        statePrimaryEnabled,
        statePrimaryHover,
        statePrimarySelected,
        statePrimaryFocus,
        stateSecondaryEnabled,
        stateSecondaryHover,
        stateSecondarySelected,
        stateSecondaryFocus,
        stateNegativeEnabled,
        stateNegativeHover,
        stateNegativeSelected,
        stateNegativeFocus,
        stateInfoEnabled,
        stateInfoHover,
        stateInfoSelected,
        stateInfoFocus,
        stateInverseEnabled,
        stateInverseHover,
        stateInverseSelected,
        stateInverseFocus,
        statePositiveEnabled,
        statePositiveHover,
        statePositiveSelected,
        statePositiveFocus,
      ];
}

/// The semantic spacing for AA
class ZetaSpacingAA extends Equatable implements ZetaSpacing {
  /// Constructor for [ZetaSpacingAA]
  const ZetaSpacingAA({required this.primitives});
  @override
  final ZetaPrimitives primitives;
  @override
  double get none => primitives.x0;
  @override
  double get minimum => primitives.x1;
  @override
  double get small => primitives.x2;
  @override
  double get medium => primitives.x3;
  @override
  double get large => primitives.x4;
  @override
  double get xl => primitives.x5;
  @override
  double get xl_2 => primitives.x6;
  @override
  double get xl_3 => primitives.x7;
  @override
  double get xl_4 => primitives.x8;
  @override
  double get xl_5 => primitives.x9;
  @override
  double get xl_6 => primitives.x10;
  @override
  double get xl_7 => primitives.x11;
  @override
  double get xl_8 => primitives.x12;
  @override
  double get xl_9 => primitives.x13;
  @override
  double get xl_10 => primitives.x14;
  @override
  double get xl_11 => primitives.x15;
  @override
  List<Object?> get props => [
        none,
        minimum,
        small,
        medium,
        large,
        xl,
        xl_2,
        xl_3,
        xl_4,
        xl_5,
        xl_6,
        xl_7,
        xl_8,
        xl_9,
        xl_10,
        xl_11,
      ];
}

/// The semantic spacing for AAA
class ZetaSpacingAAA extends Equatable implements ZetaSpacing {
  /// Constructor for [ZetaSpacingAAA]
  const ZetaSpacingAAA({required this.primitives});
  @override
  final ZetaPrimitives primitives;
  @override
  double get none => primitives.x0;
  @override
  double get minimum => primitives.x1;
  @override
  double get small => primitives.x2;
  @override
  double get medium => primitives.x3;
  @override
  double get large => primitives.x4;
  @override
  double get xl => primitives.x5;
  @override
  double get xl_2 => primitives.x6;
  @override
  double get xl_3 => primitives.x7;
  @override
  double get xl_4 => primitives.x8;
  @override
  double get xl_5 => primitives.x9;
  @override
  double get xl_6 => primitives.x10;
  @override
  double get xl_7 => primitives.x11;
  @override
  double get xl_8 => primitives.x12;
  @override
  double get xl_9 => primitives.x13;
  @override
  double get xl_10 => primitives.x14;
  @override
  double get xl_11 => primitives.x15;
  @override
  List<Object?> get props => [
        none,
        minimum,
        small,
        medium,
        large,
        xl,
        xl_2,
        xl_3,
        xl_4,
        xl_5,
        xl_6,
        xl_7,
        xl_8,
        xl_9,
        xl_10,
        xl_11,
      ];
}

/// The semantic radius for AA
class ZetaRadiusAA extends Equatable implements ZetaRadius {
  /// Constructor for [ZetaRadiusAA]
  const ZetaRadiusAA({required this.primitives});
  @override
  final ZetaPrimitives primitives;
  @override
  Radius get none => primitives.r_0;
  @override
  Radius get minimal => primitives.s;
  @override
  Radius get rounded => primitives.m;
  @override
  Radius get large => primitives.l;
  @override
  Radius get xl => primitives.xl;
  @override
  Radius get full => primitives.xl_4;
  @override
  List<Object?> get props => [none, minimal, rounded, large, xl, full];
}

/// The semantic radius for AAA
class ZetaRadiusAAA extends Equatable implements ZetaRadius {
  /// Constructor for [ZetaRadiusAAA]
  const ZetaRadiusAAA({required this.primitives});
  @override
  final ZetaPrimitives primitives;
  @override
  Radius get none => primitives.r_0;
  @override
  Radius get minimal => primitives.s;
  @override
  Radius get rounded => primitives.m;
  @override
  Radius get large => primitives.l;
  @override
  Radius get xl => primitives.xl;
  @override
  Radius get full => primitives.xl_4;
  @override
  List<Object?> get props => [none, minimal, rounded, large, xl, full];
}

/// The semantic tokens for Zeta
abstract interface class ZetaSemantics {
  /// Semantic colors
  ZetaColors get colors;

  /// Semantic sizes
  ZetaSpacing get spacing;

  /// Semantic Radius
  ZetaRadius get radius;

  /// Primitives for this semantics
  ZetaPrimitives get primitives;
}

/// The semantic tokens for AA
class ZetaSemanticsAA implements ZetaSemantics {
  /// Constructor for [ZetaSemanticsAA]
  ZetaSemanticsAA({required this.primitives})
      : colors = ZetaColorsAA(primitives: primitives),
        spacing = ZetaSpacingAA(primitives: primitives),
        radius = ZetaRadiusAA(primitives: primitives);

  @override
  final ZetaPrimitives primitives;
  @override
  final ZetaColors colors;
  @override
  final ZetaSpacing spacing;
  @override
  final ZetaRadius radius;
}

/// The semantic tokens for AAA
class ZetaSemanticsAAA implements ZetaSemantics {
  /// Constructor for [ZetaSemanticsAAA]
  ZetaSemanticsAAA({required this.primitives})
      : colors = ZetaColorsAAA(primitives: primitives),
        spacing = ZetaSpacingAAA(primitives: primitives),
        radius = ZetaRadiusAAA(primitives: primitives);

  @override
  final ZetaPrimitives primitives;
  @override
  final ZetaColors colors;
  @override
  final ZetaSpacing spacing;
  @override
  final ZetaRadius radius;
}
